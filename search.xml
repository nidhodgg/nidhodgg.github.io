<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IO流运用实例</title>
      <link href="/posts/126cf97e.html"/>
      <url>/posts/126cf97e.html</url>
      
        <content type="html"><![CDATA[<h2 id="FileInputStream和FileOutputStream"><a href="#FileInputStream和FileOutputStream" class="headerlink" title="FileInputStream和FileOutputStream"></a>FileInputStream和FileOutputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 创建文件的输入流, 将文件读入到程序</span></span><br><span class="line">        <span class="comment">//2. 创建文件的输出流, 将读取到的文件数据，写入到指定的文件.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\girl.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\girl_01.jpg&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line">            <span class="comment">//定义一个字节数组,提高读取效果</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//读取到后，就写入到文件 通过 fileOutputStream</span></span><br><span class="line">                <span class="comment">//即，是一边读，一边写</span></span><br><span class="line">                fileOutputStream.write(buf, <span class="number">0</span>, readLen);<span class="comment">//一定要使用这个方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关闭输入流和输出流，释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileReader-和-FileWriter"><a href="#FileReader-和-FileWriter" class="headerlink" title="FileReader 和 FileWriter"></a>FileReader 和 FileWriter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//单个字符读取文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//写出文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;d:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//创建一个FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取-使用read,单个字符读取</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//停止</span></span><br><span class="line">            <span class="keyword">if</span> (fileReader != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//字符数组读取文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//写出文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;d:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//字符长度</span></span><br><span class="line">        <span class="type">char</span> buf[] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];<span class="comment">//一次读取8个字符</span></span><br><span class="line">        <span class="comment">//1.先把文件读取到buf数组里面去</span></span><br><span class="line">        <span class="comment">//2.一次读取8个字符</span></span><br><span class="line">        <span class="comment">//3.读取完成后输出</span></span><br><span class="line">        <span class="comment">//创建一个FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取-使用read(buf),返回的是实际读取的字符数</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">                <span class="comment">//从buf文件下标为0的位置取readLen个字符转成字符串后显示</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//停止</span></span><br><span class="line">            <span class="keyword">if</span> (fileReader != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;d:\\note.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span> chars[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);<span class="comment">//默认是覆盖写入</span></span><br><span class="line">            <span class="comment">//1.写入单个字符write(int)</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">            <span class="comment">//2.写入指定数组write(char[])</span></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line">            <span class="comment">//3.写入指定数组的指定部分write(char[],off,len)</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;xzljava&quot;</span>.toCharArray(),<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//4.写入整个字符串write(String)</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好重庆~~&quot;</span>);</span><br><span class="line">            <span class="comment">//5.写入指定字符串的指定部分write(String,off,len)</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海北京重庆&quot;</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//在数据量大的时候循环写入</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//对于FileWriter一定要关闭或者flush才能把数据写入</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/posts/fed4c017.html"/>
      <url>/posts/fed4c017.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-IO-流原理"><a href="#Java-IO-流原理" class="headerlink" title="Java IO 流原理"></a>Java IO 流原理</h2><p>I/O是<strong>Input</strong>和<strong>Output</strong>的缩写常用与<strong>数据传输</strong>，<strong>读/写文件</strong>，<strong>网络通讯</strong>等</p><p>Input：读取外部数据（磁盘，光盘中的数据）到程序（内存）中</p><p>Output：将程序（内存）数据输入到磁盘，光盘等存储设备中</p><h2 id="输入流和输出流"><a href="#输入流和输出流" class="headerlink" title="输入流和输出流"></a>输入流和输出流</h2><p>输入流：从文件读取数据，是一个拉取数据的过程</p><p>输出流：是将数据写入到文件，是一个推送数据的过程</p><p>输入流和输出流按读取和写入的数据单位可分为<strong>字节流</strong>和<strong>字符流</strong>，字节流是以字节为单位传输数据的流，字符流是以字符为单位传输数据的流</p><h2 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h2><p>字节流：（8 bit）二进制文件</p><p>字符流：字符文本文件</p><h2 id="节点流和处理流（包装流）"><a href="#节点流和处理流（包装流）" class="headerlink" title="节点流和处理流（包装流）"></a>节点流和处理流（包装流）</h2><ol><li>节点流可以从一个特定的数据源读写数据<br>如：FileReader，FileWriter</li><li>处理流（包装流）是连接已存在的流（节点流或处理流）之上，提供更强大的读写能力，也更加灵活<br>如：BufferedReader，BufferedWriter</li></ol><p><strong>节点流以缓冲的方式提高输入输出的效率</strong></p><p><strong>处理流提供了便捷的方法来大批量的输入输出数据</strong></p><h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h2><div class="table-container"><table><thead><tr><th></th><th>类型</th><th>默认设备</th></tr></thead><tbody><tr><td>System.in标准输入</td><td>InputStream</td><td>键盘</td></tr><tr><td>System.out标准输出</td><td>PrintStream</td><td>显示器</td></tr></tbody></table></div><p><code>Scanner</code>就是<strong>标准输入键盘接受数据</strong></p><p>再比如：<code>System.out.println(&quot;xxxx&quot;);</code>就是<strong>使用out对象将数据输出到显示器</strong></p><hr><h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><p><strong>四大抽象基类</strong></p><div class="table-container"><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table></div><ol><li>Java中IO流设计40多个类，但全部是基于以上<strong>四大抽象基类</strong>衍生出来的</li><li>这四个类衍生出来的子类名称都是以父类名作为子类名字后缀比如 FileInputStream和FileOutputStream<br>FileReader和FileWriter<br>BufferedReader和BufferedWriter等</li></ol><div class="table-container"><table><thead><tr><th>分类</th><th>节点流/处理流</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td></td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>访问文件</td><td>节点流</td><td>FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>访问数组</td><td>节点流</td><td>ByteArrayInputStream</td><td>ByteArrayOutputStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td>访问管理</td><td>节点流</td><td>PipedInputStream</td><td>PipedOutputStream</td><td>PipedReader</td><td>PipedWriter</td></tr><tr><td>访问字符串</td><td>节点流</td><td></td><td></td><td>StringReader</td><td>StringWriter</td></tr><tr><td>缓冲流</td><td>处理流</td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转换流</td><td>处理流</td><td></td><td></td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>对象流</td><td>处理流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td>打印流</td><td>处理流</td><td></td><td>PrintOutputStream</td><td></td><td>PrintWriter</td></tr><tr><td>推回输入流</td><td>处理流</td><td>PushbackInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td>特殊流</td><td>处理流</td><td>DataInputStream</td><td>DateOutputStream</td><td></td></tr></tbody></table></div><hr><h2 id="节点流——FileInputStream和FileOutputStream"><a href="#节点流——FileInputStream和FileOutputStream" class="headerlink" title="节点流——FileInputStream和FileOutputStream"></a>节点流——FileInputStream和FileOutputStream</h2><p>字节输入/输出流：单个字节的读取，效率较低</p><blockquote><p><strong>FileInputStream</strong>使用流程：</p><ol><li><p><strong>创建获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txx（文件格式）&quot;;</code>  </p><p><code>int readData = 0;</code>读取文件内容</p><p><code>FileInputStream fileInputStream = null;</code><strong>让其IO流可以关闭</strong></p></li><li><p><strong>创建FileInputStream对象</strong><br><code>fileInputStream = new FileInputStream(filePath);</code><br>循环读取（返回-1代表读取完毕）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="type">char</span>)readData);<span class="comment">//转成char显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭流</strong><br><code>fileInputStream.close();</code></p></li></ol><p><strong>FileOutputStream</strong>使用流程：</p><ol><li><p><strong>获取文件地址</strong><br><code>String filePath（文件名称） = &quot;e:\\XXX.txx（文件格式）&quot;;</code>  </p><p><strong>让其IO流可以关闭</strong><br><code>FileOutputStream fileOutputStream = null;</code></p></li><li><p><strong>创建FileOutputStream对象</strong><br><code>fileOutputStream = new FileOutputStream(filePath, true);</code>或<code>fileOutputStream = new FileOutputStream(filePath);</code></p><blockquote><p><strong>注意：</strong></p><p><code>new FileOutputStream(filePath)</code> 创建方式，当写入内容时，会覆盖原来的内容</p><p><code>new FileOutputStream(filePath, true)</code> 创建方式，当写入内容时，是追加到文件后面</p></blockquote></li></ol><p>   <strong>写入字符串</strong></p><p>   <code>String str = &quot;XXXXXXXX（需要写入的内容）&quot;;</code></p><p>   或者<code>fileOutputStream.write(str.getBytes(), 0, 3（从数组下标0-3写入）);</code>将 len 字节从位于偏移量 off 的 指定字节数组写入此文件输出流</p><ol><li><strong>关闭流</strong><br><code>fileOutputStream.close();</code></li></ol></blockquote><hr><h2 id="节点流——FileReader-和-FileWriter"><a href="#节点流——FileReader-和-FileWriter" class="headerlink" title="节点流——FileReader 和 FileWriter"></a>节点流——FileReader 和 FileWriter</h2><p>FileReade和FileWriter的继承和实现：<br><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101350850.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101350852.png" alt=""></p><p>FileReader 相关方法：</p><ul><li><p><code>new FileReader(File/String)</code>创建</p></li><li><p><code>read</code>：读取单个字符，返回该字符，读取到文件末尾返回<strong>-1</strong></p></li><li><p><code>read(char[])</code>：批量读取多个字符到数组，返回读取到的字符数，读取到文件末尾返回<strong>-1</strong><br><code>new String (char[])</code>：将char[]转换成String</p><p><code>new String (char[]，off，len)</code>：将char[]的指定部分转换成String</p></li></ul><p>FileWriter 常用方法：</p><ul><li><code>new FileWriter(File/String)</code>：覆盖模式，相当于流的指针在首端</li><li><code>new FileWriter(File/String,true)</code>：追加模式，相当于流的指针在尾端</li><li><code>write(int)</code>：写入单个字符</li><li><code>write(char[])</code>：写入指定数组</li><li><code>write(char[],off,len)</code>：写入指定数组的指定部分</li><li><code>write(string)</code>：写入整个字符串</li><li><code>write(string,off,len)</code>：写入字符串的指定部分</li><li><code>toCharArray</code>：将String转换成char[]</li></ul><p>注意：</p><p><strong>FileWriter使用后，必须要关闭(close)或刷新(flush),否则写入不到指定的文件!</strong></p><h2 id="处理流——BufferedReader和BufferedWriter"><a href="#处理流——BufferedReader和BufferedWriter" class="headerlink" title="处理流——BufferedReader和BufferedWriter"></a>处理流——BufferedReader和BufferedWriter</h2><blockquote><p><strong>BufferedReader</strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txt（文件格式）&quot;;</code>  </p></li><li><p><strong>创建BufferedReader对象</strong><br><code>BufferedReader bufferedReader= new BufferedReader(new FileReader(filePath));</code></p></li><li><p><strong>读取</strong><br><code>String line;</code>按行读取，效率高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当返回null时读取完毕</span></span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭流</strong><br><code>bufferedReader.close();</code></p></li></ol><p><strong>BufferedWriter</strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txt（文件格式）&quot;;</code>  </p></li><li><p><strong>创建BufferedWriter对象</strong></p><ol><li><p><code>new FileWriter(filePath, true)</code> 表示以追加的方式写入</p></li><li><p><code>new FileWriter(filePath)</code>  表示以覆盖的方式写入</p></li></ol><p><code>BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filePath));</code></p></li><li><p><strong>写入</strong><br><code>bufferedWriter.write(&quot;XXXXXX&quot;)</code><br><code>bufferedWriter.newLine();</code>换行</p></li><li><p><strong>关闭流</strong><br><code>bufferedWriter.close();</code></p></li></ol></blockquote><h2 id="处理流——BufferedInputStream-和-BufferedOutputStream"><a href="#处理流——BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="处理流——BufferedInputStream 和 BufferedOutputStream"></a>处理流——BufferedInputStream 和 BufferedOutputStream</h2><p>BufferedInputStream和BufferedOutputStream 的继承和实现：<br><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101505364.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101505363.png" alt=""></p><blockquote><p><strong>BufferedInputStream</strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txt（文件格式）&quot;;</code>  </p></li><li><p><strong>创建BufferedReader和BufferedOutputStream对象</strong><br><code>BufferedInputStream bis = null;</code></p><p><code>BufferedOutputStream bos = null;</code></p></li><li><p><strong>读取和写入</strong></p><p><code>byte[] buff = new byte[1024];</code></p><p><code>int readLen = 0;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line"><span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(buff, <span class="number">0</span>, readLen);<span class="comment">//写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bis != <span class="literal">null</span>) &#123;</span><br><span class="line">bis.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bos != <span class="literal">null</span>) &#123;</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="对象流——ObjectInputStream-和-ObjectOutputStream"><a href="#对象流——ObjectInputStream-和-ObjectOutputStream" class="headerlink" title="对象流——ObjectInputStream 和 ObjectOutputStream"></a>对象流——ObjectInputStream 和 ObjectOutputStream</h2><p>用于<strong>需要保存/恢复值和数据类型</strong>的情况<br>例如：想要保存<code>int num = 123</code>，而不是数字123，而且可以直接在文件中恢复<code>int 123</code><br>想要保存<code>Dog dog = new Dog(&quot;小白&quot;,3)</code>这个dog对象，而且能直接在文件中恢复dog对象</p><p>如果要让某个对象支持序列化，必须实现两个接口之一<br><code>Serializable</code>和<code>Externalizable</code><br><strong>注意</strong>：<code>Externalizable</code>有方法需要实现，所以通常用<code>Serializable</code></p><p><code>ObjectInputStream</code> ：提供序列化功能</p><p><code>ObjectOutputStream</code> ：提供反序列化功能</p><blockquote><p><strong>ObjectInputStream</strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.dat（文件格式）&quot;;</code><br>序列化后保存的文件格式，是特殊的</p></li><li><p><strong>创建ObjectInputStream对象</strong><br><code>ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filePath));</code></p></li><li><p><strong>序列化保存数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oos.writeInt(<span class="number">100</span>);<span class="comment">//保存一个int数据类型</span></span><br><span class="line">oos.writeBoolean(<span class="literal">true</span>);<span class="comment">//保存一个boolean数据类型</span></span><br><span class="line">oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//保存一个char数据类型</span></span><br><span class="line">oos.writeDouble(<span class="number">9.5</span>);<span class="comment">//保存一个double数据类型</span></span><br><span class="line">oos.writeUTF(<span class="string">&quot;xzljava&quot;</span>);<span class="comment">//保存一个String数据类型</span></span><br><span class="line"><span class="comment">//保存一个dog类对象</span></span><br><span class="line">oos.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黄&quot;</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭流</strong><br><code>oos.close();</code></p></li></ol><p><strong>ObjectOutputStream</strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.dat（文件格式）&quot;;</code><br>序列化后保存的文件格式，是特殊的</p></li><li><p><strong>创建ObjectInputStream对象</strong><br><code>ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath));</code></p></li><li><p><strong>反序列化恢复数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ois.readInt());</span><br><span class="line">System.out.println(ois.readBoolean());</span><br><span class="line">System.out.println(ois.readChar());</span><br><span class="line">System.out.println(ois.readDouble());</span><br><span class="line">System.out.println(ois.readUTF());</span><br><span class="line"><span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;dog信息=&quot;</span> + dog);</span><br></pre></td></tr></table></figure><p><strong>注意：读取顺序（反序列化）要和存放顺序（序列化）一致</strong></p></li><li><p><strong>关闭流</strong><br><code>ois.close();</code></p></li></ol></blockquote><h2 id="转换流——InputStreamReader-和-OutputStreamWriter"><a href="#转换流——InputStreamReader-和-OutputStreamWriter" class="headerlink" title="转换流——InputStreamReader 和 OutputStreamWriter"></a>转换流——InputStreamReader 和 OutputStreamWriter</h2><p>常用于：解决<strong>文件乱码</strong>问题，<strong>使用中文</strong>问题。处理纯文本数据时，效率更高<br><strong>且可以指定编码格式**</strong>（UTF-8，gbk，gb2312，ISO8859-1等）**</p><p>InputStreamReader ：Reader的子类，可以将InputStream（字节流）转换成Reader（字符流）</p><p>OutputStreamWriter ：Writer的子类，可以将OutputStream（字节流）转换成Writer（字符流）</p><blockquote><p><strong>InputStreamReader </strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txt（文件格式）&quot;;</code>  </p></li><li><p><strong>创建InputStreamReader对象且指定编码</strong><br><code>InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;utf-8&quot;);</code></p></li><li><p><strong>传入数据</strong><br><code>BufferedReader br = new BufferedReader(isr)</code></p></li><li><p><strong>读取</strong><br><code>String s = br.readLine();</code></p></li><li><p><strong>关闭流</strong><br><code>br.close();</code></p></li></ol><p><strong>OutputStreamWriter </strong>使用流程：</p><ol><li><p><strong>创建/获取文件地址和名称</strong></p><p><code>String filePath（文件名称） = &quot;e:\\XXX.txt（文件格式）&quot;;</code>  </p></li><li><p><strong>创建OutputStreamWriter 对象</strong><br><code>OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;d:\\XXX.txt&quot;), &quot;utf-8&quot;);</code></p></li><li><p><strong>写入</strong><br><code>osw.write(&quot;hello,重庆&quot;);</code></p></li><li><p><strong>关闭流</strong><br><code>osw.close();</code></p></li></ol></blockquote><h2 id="打印流——PrintStream-和-PrintWriter"><a href="#打印流——PrintStream-和-PrintWriter" class="headerlink" title="打印流——PrintStream 和 PrintWriter"></a>打印流——PrintStream 和 PrintWriter</h2><p>PrintStream 和 PrintWriter的继承和实现接口：</p><p><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101555909.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202309101555910.png" alt=""></p><h2 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h2><p>用于读取和写入配置文件</p><p><strong>核心代码是就是Hashtable</strong></p><blockquote><p>配置文件的格式：</p><p><strong>键=值</strong><br>注意：键值对<strong>不需要有空格</strong>，值<strong>不需要用引号</strong>，默认类型是<strong>String</strong></p></blockquote><p>Properties 类使用流程：</p><blockquote><ol><li><p><strong>创建Properties 对象</strong><br><code>Properties properties = new Properties();</code></p><p>如果该文件没有 <strong>key</strong> 就是<strong>创建</strong></p><p>如果该文件有 <strong>key</strong> 就是<strong>修改</strong></p></li><li><p><strong>加载指定配置文件</strong><br><code>properties.load(new FileReader(&quot;src\\MySQL.properties&quot;));</code></p></li><li><p><strong>把K-V显示在控制台</strong><br><code>properties.list(System.out);</code></p></li><li><p><strong>根据K获取对应的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;User&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;===根据K获取对应的值===&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;用户名：&quot;</span>+user);</span><br><span class="line">System.out.println(<span class="string">&quot;ip地址：&quot;</span>+ip);</span><br><span class="line">System.out.println(<span class="string">&quot;密码：&quot;</span>+pwd);</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>Properties 类常用方法：</p><ul><li><code>load</code>：加载配置文件的键值对到<strong>Properties</strong>对象</li><li><code>list</code>：将数据显示到指定设备</li><li><code>getProperty(key)</code>：根据<strong>键</strong>获取<strong>值</strong></li><li><code>setProperty(key,value)</code>：设置<strong>键值对</strong>到Properties对象</li><li><code>store</code>：将Properties中的<strong>键值对</strong>存储到配置文件，在idea中，保存信息到配置文件，如果含有中文，会存储为unicode码</li></ul><p><a href="http://tool.chinaz.com/tools/unicode,aspx">http://tool.chinaz.com/tools/unicode,aspx</a> unicode码查询工具</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo上传图片到github失败</title>
      <link href="/posts/5e75c00c.html"/>
      <url>/posts/5e75c00c.html</url>
      
        <content type="html"><![CDATA[<h2 id="PicGo上传图片到github失败"><a href="#PicGo上传图片到github失败" class="headerlink" title="PicGo上传图片到github失败"></a>PicGo上传图片到github失败</h2><p>今天想给自己的博客换个封面用PicGo上传的时候一直红色进度条</p><p>首先我先去看看了自带的PicGo设置里面的日志文件</p><p><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202308220158375.jpg" alt="1692639508568"></p><p>不出所料的又是一个连接失败</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>换DNS域名服务器，在hosts文件中加入</p><p><code>20.205.243.166 github.com</code></p><p><code>140.82.121.4 github.com</code></p><p><code>140.82.121.3 github.com</code></p><ol><li><p>查找www.github.com的服务器iP<br>注意github域名地址经常会变记得用DNS查询工具自己查找一下</p></li><li><p>Win+R打开运行窗口，输入cmd后输入<br><code>notepad C:\Windows\System32\drivers\etc\hosts</code><br>即可打开hosts文件</p></li><li><p>加入<code>20.205.243.166 github.com</code></p><p><code>140.82.121.4 github.com</code></p><p><code>140.82.121.3 github.com</code>即可</p></li><li><p>修改完成后，在cmd执行命令行<code>ipconfig /flushdns</code> 刷新本地 dns 缓存应该就可以了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程基础</title>
      <link href="/posts/ce588cc4.html"/>
      <url>/posts/ce588cc4.html</url>
      
        <content type="html"><![CDATA[<h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><ol><li><p>单线程：同一时间，只允许执行一个线程</p></li><li><p>多线程：同一时间，可以执行多个线程，比如下载时，可以多个任务同时下载，微信聊天时，可以多个窗口同时聊天</p></li><li><p>并发：同一时间，多个任务交替执行（单核cpu）</p><p><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202308220201504.jpg" alt="1692640842736"></p></li><li><p>并行：同一时间，多个任务同时执行（多核cpu）</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/nidhodgg/figure/img202308220201505.jpg" alt="1692640849781"></p><h2 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h2><p><code>Java单继承机制，有时候一个类已经继承了某个父类，这时不能继承Thread类，但是可以通过实现Runnable接口来实现</code></p><p>创建线程——使用线程</p><ol><li><code>继承Thread类</code>，重写run方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重写run方法写上自己的业务需求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般重写run方法用<code>while(true)&#123;&#125;</code>循环</p><p>使用时：</p><p>先创建 Cat 对象，可以当做线程使用<br>启动线程</p><p><code>Cat cat = new Cat();</code><br><code>cat.start();</code></p><ol><li><code>实现Runnable接口</code>，重写run方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> impelements Runnable&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重写run方法写上自己的业务需求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般重写run方法用<code>while(true)&#123;&#125;</code>循环</p><p>使用时：</p><p>先创建 Dog对象，可以当做线程使用<br>后创建 Thread 对象，把 dog 对象(实现 Runnable),放入 Thread<br>启动线程</p><p><code>Dog dog = new Dog();</code><br><code>Thread thread = new Thread(dog);</code><br><code>thread.start();</code></p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>方法：<code>setDaemon(true)</code></p><p>使用情况：希望主线程结束后，让子线程也结束</p><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><ol><li><code>setName</code>设置线程名称，使与参数name相同</li><li><code>getName</code> 返回该线程名称</li><li><code>start</code> 开始线程</li><li><code>run</code> 调用线程run方法</li><li><code>setPriority</code> 改变线程优先级</li><li><code>getPriority</code> 获取线程优先级</li><li><code>sleep</code> 线程休眠（暂停执行，并不是结束线程）</li><li><code>interrupt</code> 中断线程（也没有结束线程）</li></ol><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>五个阶段：新建、就绪、运行、阻塞、死亡。</p><p><strong>新建</strong>：使用new方法，new出来线程，此时仅仅由JAVA虚拟机为其分配内存，并初始化成员变量的值。<strong>此时仅仅是个对象</strong></p><p><strong>就绪</strong>：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行；<br>该线程进入就绪状态，<strong>JAVA虚拟机会为其创建方法调用栈和程序计数器</strong>。线程的执行是由底层平台控制， 具有一定的随机性。</p><p><strong>运行</strong>：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能；（当处于就绪状态的线程获得CPU，它就会执行run()方法）</p><p><strong>阻塞</strong>：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态</p><p><strong>死亡</strong>：<br>1、<code>run()</code>方法执行完成，线程正常结束；<br>2、线程抛出一个未捕获的<code>Exception</code>或<code>Error</code>；<br>3、直接调用线程的<code>stop()</code>方法结束该线程——该方法容易导致死锁，通常不建议使用。</p><h2 id="线程同步-Synchronized"><a href="#线程同步-Synchronized" class="headerlink" title="线程同步/Synchronized"></a>线程同步/Synchronized</h2><p>抽象理解成：排队上厕所时，如果有一个人进去了就会<code>上锁</code>，必须等他结束，下一个人才可以进去</p><ol><li>同步代码块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) &#123;</span><br><span class="line">    <span class="comment">//需要被同步代码；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>得到对象的锁，才能操作同步代码</code></p><ol><li>同步方法</li></ol><p><code>synchronized</code>还可以放在方法声明中，表示整个方法-为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>得到对象的锁，才能操作同步代码</code></p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><code>保证共享数据操作的完整性</code>。</p><p>对象都有一个<code>互斥锁</code>用来保证在任一时刻，只有一个线程访问该对象</p><p><code>synchronized</code>来与对象的互斥锁联系，当某个对象用<code>synchronized</code>修饰时，表明该对象在<code>任一时刻只能由一个线程访问</code></p><p>同步方法(非静态的)的锁可以是<code>this</code>,也可以是其他对象(要求是同一个对象)</p><p>同步方法(静态的)的锁为当前类本身。</p><p>同步的局限性：<code>导致程序的执行效率要降低</code></p><hr><p>实现过程</p><ol><li>分析需要上锁的代码</li><li>选择同步代码块或者同步方法</li><li>要求多个线程的锁对象为同一个</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>当A访问B的时候，需要B的锁，而B的锁却已经被占用<br>B访问A的时候，需要A的锁，A的锁也被占用<br>这两者同时发生时，会死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">        <span class="comment">//卡住-死锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果 flag 为 Ture, 线程 A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程 A 得不到 o2 对象锁，就会 Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果 flag 为 False, 线程 B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程 B 得不到 o1 对象锁，就会 Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得 li 对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得 li 对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象编程（基础）</title>
      <link href="/posts/98771df7.html"/>
      <url>/posts/98771df7.html</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>1) 类是抽象的，概念的，代表一类事物，比如人类，猫类，狗类，工具类，等等….即它是<strong>数据类型</strong>.<br>2) 对象是具体的，实际的，代表一个具体事物, 即是<strong>实例</strong>.<br>3) 类是对象的模板，对象是类的一个个体，对应一个实例</p><blockquote><p>属性/成员变量/字段</p><p>即<code>成员变量 = 属性 = field(字段)</code></p><p><code>属性是类的一个组成部分</code>，一般是基本数据类型,也可是引用类型(对象，数组)</p></blockquote><p>如何创建对象：</p><blockquote><p>1.声明再创建 </p><p><code>Cat cat ; //声明对象 cat</code></p><p><code>`cat = new Cat(); //创建</code></p><p>2.直接创建</p><p><code>Cat cat = new Cat();</code></p></blockquote><p>内存分配机制：</p><blockquote><p>1) 栈： 一般存放基本数据类型(局部变量)<br>2) 堆： 存放对象(Cat cat , 数组等)<br>3) 方法区：常量池(常量，比如字符串)， 类加载信息</p></blockquote><hr><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性的定义类型可以为<strong>任意类型</strong>，包含基本类型或引用类型</p><p>属性如果不赋值有默认值</p><p><code>int 0 , short 0 , byte 0 , long 0 , float 0.0 , double 0.0，</code></p><p><code>char \u0000 , boolean false , String null</code></p><p>如何访问属性：</p><blockquote><p><code>对象名.属性名；</code></p><p><code>cat.name ;</code></p><p><code>cat.age;</code></p><p><code>cat.color;</code></p></blockquote><hr><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>1) 公开级别:用 public 修饰,对外公开<br>2) 受保护级别:用 protected 修饰,对子类和同一个包中的类公开<br>3) 默认级别:没有修饰符号,向同一个包的类公开.<br>4) 私有级别:用 private 修饰,只有类本身可以访问,不对外公开</p><div class="table-container"><table><thead><tr><th style="text-align:center">访问修饰符</th><th style="text-align:center">访问级别</th><th style="text-align:center">同类</th><th style="text-align:center">同包</th><th style="text-align:center">子类</th><th style="text-align:center">不同包</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">公开</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">受保护</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">没有访问修饰符</td><td style="text-align:center">默认</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">私有</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></div><hr><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><p> <code>访问修饰符+返回类型(没有就是void)+方法名(形参列表)&#123;</code></p><p><code>需要执行的代码</code></p><p><code>return(有返回类型)</code></p><p><code>&#125;</code></p><blockquote><p>注意</p><p><strong>实参和形参的类型要一致或兼容、个数、顺序必须一致</strong></p><p><strong>一个方法最多有一个返回值</strong></p><p><strong>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</strong></p><p><strong>如果方法有返回数据类型，则方法体中最后的执行语句必须为 return 值，且返回值类型必须和 return 的值类型一致或兼容</strong></p></blockquote><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>类的一种特殊的方法，它的主要作用是完成对新对象的初始化</p><p><code>[修饰符] 方法名(形参列表)&#123;</code></p><p><code>方法体;</code></p><p><code>&#125;</code></p><p>1) 构造器的修饰符可以默认， 也可以是 public protected private<br>2) 构造器没有返回值<br>3) 方法名 和 类名字必须一样<br>4) 参数列表 和 成员方法一样的规则<br>5) 构造器的调用, 由系统完成<br>6) 没有定义构造器，系统会自动给类生成一个默认无参构造器</p><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><p>1) this 关键字可以用来访问本类的属性、方法、构造器<br>2) this 用于区分当前类的属性和局部变量<br>3) 访问成员方法的语法：<code>this.方法名(参数列表);</code><br>4) 访问构造器语法：this(参数列表); 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一条语句)</p><p>5) this 不能在类定义的外部使用，只能在类定义的方法中使用。</p><h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><p>super 代表父类的引用，用于<strong>访问父类的属性、方法、构造器</strong></p><ol><li><p>访问父类的属性，但不能访问父类的private属性</p><p><code>super.属性名</code></p></li><li><p>访问父类的方法，但不能访问父类的private方法</p><p><code>super.方法名(参数列表)</code></p></li><li><p>访问父类的构造器</p></li></ol><div class="table-container"><table><thead><tr><th>No.</th><th>区别</th><th>this</th><th>super</th></tr></thead><tbody><tr><td>1</td><td>访问属性</td><td>访问本类中的属性，如果本类没有则从父类中继续查找</td><td>从父类开始查找属性</td></tr><tr><td>2</td><td>调用方法</td><td>访问本类中的方法，如果本类没有则从父类中继续查找</td><td>从父类开始查找方法</td></tr><tr><td>3</td><td>调用构造器</td><td>调用本类构造器，必须放在本类构造器的首行</td><td>调用父类构造器，必须放在子类构造器的首行</td></tr><tr><td>4</td><td>特殊</td><td>表示当前对象</td><td>子类中访问父类的对象</td></tr></tbody></table></div><hr><h2 id="方法重载OverLoad"><a href="#方法重载OverLoad" class="headerlink" title="方法重载OverLoad"></a>方法重载OverLoad</h2><p>允许同一个类中，多个同名方法的存在，但要求形参列表不一致</p><blockquote><p>方法名：必须相同</p><p>形参列表：必须不同（类型，顺序，个数至少有一个不同）</p><p>返回类型：无要求</p></blockquote><h2 id="方法重写-覆盖Override"><a href="#方法重写-覆盖Override" class="headerlink" title="方法重写/覆盖Override"></a>方法重写/覆盖Override</h2><p>子类有一个方法，和父类的某个方法的名称、返回类型、参数一样，那么就是子类的这个方法覆盖了父类的方法</p><blockquote><p>方法名：必须相同</p><p>形参列表：必须相同</p><p>返回类型：和父类一样/或父类的返回类型子类</p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>范围</th><th>方法名</th><th>形参列表</th><th>返回类型</th><th>修饰符</th></tr></thead><tbody><tr><td>方法重载</td><td>本类</td><td>必须一样</td><td>类型，顺序，个数至少有一个不同</td><td>无要求</td><td>无要求</td></tr><tr><td>方法重写</td><td>父子类</td><td>必须一样</td><td>相同</td><td>和父类一样/或父类的返回类型子类</td><td>子类不能缩小父类的访问范围</td></tr></tbody></table></div><hr><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol><li>使用<code>private</code>将属性私有化</li><li>提供get和set方法来对属性判断，赋值和获取属性的值</li></ol><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><code>class 子类 extends 父类&#123;&#125;</code></p><p>子类自动拥有父类定义的属性和方法</p><blockquote><p>1) 子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p><p>2) 子类必须调用父类的构造器， 完成父类的初始化<br>3) 当创建子类对象时，默认情况下调用父类的无参构造器，如果父类没有提供无参构造器，必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译错误<br>4) 如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)<br>5) super 在使用时，必须放在构造器第一行(super 只能在构造器中使用)<br>6) super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器<br>7) java 所有类都是 Object 类的子类, Object 是所有类的基类.<br>8) 父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类)<br>9) 子类最多只能继承一个父类(指直接继承)，<code>单继承机制</code></p></blockquote><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>前提是：</p><p><code>1.两个对象(类)存在继承关系</code></p><p><code>2.要有方法的重写</code></p><ol><li>一个对象的编译类型和运行类型可以不一致</li><li>编译类型在定义对象时，就确定了，不能改变</li><li>运行类型是可以变化的。</li><li>编译类型看定义时=号的左边，运行类型看=号的右边</li></ol><p><code>Animal a = new Cat();</code>父类引用指向子类对象</p><p>向上转型</p><blockquote><p>本质：父类的引用指向了子类的对象</p><p>语法：<code>父类类型 引用名new子类类型();</code></p><p>特点：把不同的子类对象都当作父类来看</p><p>比如：<code>父类Parent,子类Child</code></p><p><code>父类的引用指向子类对象：Parent p=new Child();</code></p></blockquote><p>向下转型</p><blockquote><p>本质：子类的引用的指向子类对象，采取强制转型</p><p>语法：<code>子类类型 引用名=(子类类型)父类引用；</code></p><p>特点：只能强转父类的引用，不能强转父类的对象，要求父类的引用必须指向的是当前目标类型的对象。当向下转型后，可以调用子类类型中所有的成员</p><p>比如：</p><p><code>Parent p = new Child();</code><br><code>//向上转型，此时，p是Parent类型</code></p><p><code>Child c = (Child)p;</code><br><code>//此时，把Parent类型的p转成小类型Child</code></p></blockquote><h2 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h2><ol><li>当调用<strong>对象方法</strong>的时候，<strong>该方法会和该对象的内存地址、运行类型绑定</strong></li><li>当调用<strong>对象属性</strong>的时候，<strong>没有动态绑定机制，哪里声明哪里使用</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xzl.test;</span><br><span class="line"><span class="comment">//被调用的父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father-f1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father-f1()  para-int &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被调用的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123; <span class="comment">//覆盖父类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Son-f1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son-s1() para-char&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">import</span> xzl.test.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoCall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(); <span class="comment">//多态</span></span><br><span class="line">        father.f1(); <span class="comment">//打印结果： Son-f1()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="和-equals-的对比"><a href="#和-equals-的对比" class="headerlink" title="==和 equals 的对比"></a>==和 equals 的对比</h2><p><strong>==是一个比较运算符</strong></p><p>1.==:既可以判断基本类型，又可以判断引用类型</p><p>2.==:如果判断基本类型，判断的是值是否相等。</p><p>3.==:如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p><p><strong>equals是一个方法</strong></p><p>4.equals:只能判断引用类型</p><p>5.默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等</p>]]></content>
      
      
      <categories>
          
          <category> Jave学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传hexo博客文章时报错Please make sure you have the correct access rights and the repository exists.</title>
      <link href="/posts/36acb984.html"/>
      <url>/posts/36acb984.html</url>
      
        <content type="html"><![CDATA[<h2 id="上传hexo博客时github报错"><a href="#上传hexo博客时github报错" class="headerlink" title="上传hexo博客时github报错"></a>上传hexo博客时github报错</h2><p>首先注意到<strong>Please make sure you have the correct access rights and the repository exists.</strong>报错</p><p>后仔细看了看报错具体原因是因为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection refused</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><h2 id="解决方案：修改端口号"><a href="#解决方案：修改端口号" class="headerlink" title="解决方案：修改端口号"></a>解决方案：修改端口号</h2><p>很明显<strong>ssh：连接到主机 github.com 端口 22：连接被拒绝</strong>时连接端口错误</p><p>在连接端口<code>22</code>的时候被拒绝，那么我们配置到端口<code>443</code>进行连接</p><p>在<code>git</code>中使用<code>vim</code>编辑<code>ssh</code>配置文件添加端口信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>注意输入<code>vim ~/.ssh/config</code>之后按<code>esc</code>之后输入<code>:wq</code>保存</p><p>配置完成后就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型习题分析</title>
      <link href="/posts/9fbd1451.html"/>
      <url>/posts/9fbd1451.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义个泛型类DAO&lt;T&gt;,在其中定义一个Map成员变量，Map的键为String类型，值为T类型。</span></span><br><span class="line"><span class="comment"> * 分别创建以下方法：</span></span><br><span class="line"><span class="comment"> * (1) public void save(String id,T entity);保存T类型的对象到Map成员变量中</span></span><br><span class="line"><span class="comment"> * (2) public T get(String id):从map中获取id对应的对象</span></span><br><span class="line"><span class="comment"> * (3) public void update(String id,T entity):替换map中key为id的内容，改为entity对象</span></span><br><span class="line"><span class="comment"> * (4) public List&lt;T&gt;list():返回map中存放的所有T对象</span></span><br><span class="line"><span class="comment"> * (5) public void delete(String id):删除指定id对象</span></span><br><span class="line"><span class="comment"> * 定义一个User类：</span></span><br><span class="line"><span class="comment"> * 该类包含：private成员变量(int类型)id,age;(String类型)name。</span></span><br><span class="line"><span class="comment"> * 创建DAO类的对象，分别调用其save、get、update、list、delete方法来操作User对象，</span></span><br><span class="line"><span class="comment"> * 使用Juinit单元测试类进行测试</span></span><br><span class="line"><span class="comment"> * */</span></span><br></pre></td></tr></table></figure><ol><li><p>创建User类</p></li><li><p>写入User类的成员变量</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建泛型类DAO</p></li><li><p>写入DAO类的成员变量和方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DAO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String id,T entity)</span>&#123;</span><br><span class="line">        map.put(id,entity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回map中存放的T对象</span></span><br><span class="line">    <span class="comment">//遍历map[K-V]拿到所有map的value（T entity），封装到ArrayList返回即可</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList</span></span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历map</span></span><br><span class="line">        Set&lt;String&gt; strings = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings) &#123;</span><br><span class="line">            list.add(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String id,T entity)</span>&#123;<span class="comment">//把entity保存到map</span></span><br><span class="line">        map.put(id,entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testlist</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//给泛型T指定类型就是User</span></span><br><span class="line">    DAO&lt;User&gt; dao = <span class="keyword">new</span> <span class="title class_">DAO</span>&lt;&gt;();</span><br><span class="line">    dao.save(<span class="string">&quot;001&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">19</span>,<span class="number">1</span>));</span><br><span class="line">    dao.save(<span class="string">&quot;002&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">18</span>,<span class="number">2</span>));</span><br><span class="line">    dao.save(<span class="string">&quot;003&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;simth&quot;</span>,<span class="number">20</span>,<span class="number">9</span>));</span><br><span class="line">    List&lt;User&gt; list = dao.list();</span><br><span class="line">    System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line">    dao.update(<span class="string">&quot;003&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;simth&quot;</span>,<span class="number">25</span>,<span class="number">9</span>));</span><br><span class="line">    list = dao.list();</span><br><span class="line">    System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line">    System.out.println(<span class="string">&quot;id=003&quot;</span>+dao.get(<span class="string">&quot;003&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义 Employee 类</span></span><br><span class="line"><span class="comment"> * 1) 该类包含：private 成员变量 name,sal,birthday，</span></span><br><span class="line"><span class="comment"> * 其中 birthday 为 MyDate 类的对象；</span></span><br><span class="line"><span class="comment"> * 2) 为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"> * 3) 重写 toString 方法输出 name, sal, birthday</span></span><br><span class="line"><span class="comment"> * 4) MyDate 类包含: private 成员变量 month,day,year；</span></span><br><span class="line"><span class="comment"> * 并为每一个属性定义 getter, setter 方法；</span></span><br><span class="line"><span class="comment"> * 5) 创建该类的 3 个对象，并把这些对象放入 ArrayList 集合中</span></span><br><span class="line"><span class="comment"> * （ArrayList 需使用泛型来定义），对集合中的元素进行排序，并遍历输出：</span></span><br><span class="line"><span class="comment"> * 排序方式： 调用 ArrayList 的 sort 方法 , * 传入 Comparator 对象[使用泛型]，</span></span><br><span class="line"><span class="comment"> * 先按照 name 排序，如果 name 相同，则按生日日期的先后排序。【即：定制排序】</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ol><li>创建MyDate类</li><li>写入成员变量和方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;MyDate&gt;&#123;</span><br><span class="line">    <span class="comment">//继承Comparable接口以便后面比较生日的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyDate&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;years=&quot;</span> + years +</span><br><span class="line">                <span class="string">&quot;, month=&quot;</span> + month +</span><br><span class="line">                <span class="string">&quot;, day=&quot;</span> + day +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> years, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYears</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> years;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYears</span><span class="params">(<span class="type">int</span> years)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(MyDate o)</span> &#123;<span class="comment">//比较年月日的任务</span></span><br><span class="line">        <span class="comment">//在Employee中已经比较了名字</span></span><br><span class="line">        <span class="comment">//名字相同比较年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">yearMinus</span> <span class="operator">=</span> <span class="built_in">this</span>.years - o.getYears();</span><br><span class="line">        <span class="keyword">if</span> (yearMinus != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> yearMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//年相同比较月</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">monthMinus</span> <span class="operator">=</span> month - o.getMonth();</span><br><span class="line">        <span class="keyword">if</span> (monthMinus != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> monthMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//月相同比较日</span></span><br><span class="line">        <span class="keyword">return</span> day - o.getDay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建Employee类</li><li>写入成员变量和方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\nEmployee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&#x27;&quot;</span> + sal + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> sal, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>遍历和排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">work2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历员工信息</span></span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">22000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2000</span>, <span class="number">9</span>, <span class="number">3</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">30000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2001</span>, <span class="number">12</span>, <span class="number">15</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xzl&quot;</span>, <span class="number">32000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2001</span>, <span class="number">8</span>, <span class="number">2</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xzl&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2001</span>, <span class="number">8</span>, <span class="number">3</span>)));</span><br><span class="line">        System.out.println(employees);</span><br><span class="line">        <span class="comment">//排序员工</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进行排序&quot;</span>);</span><br><span class="line">        employees.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee emp1, Employee emp2)</span> &#123;</span><br><span class="line">                <span class="comment">//先按照 name 排序，如果 name 相同，则按生日日期的先后排序</span></span><br><span class="line">                <span class="comment">//先对传入参数进行验证</span></span><br><span class="line">                <span class="keyword">if</span> (!(emp1 <span class="keyword">instanceof</span> Employee &amp;&amp; emp2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;类型不正确&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//比较名字</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> emp1.getName().compareTo(emp2.getName());</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//名字相同</span></span><br><span class="line">                <span class="comment">//比较birthday</span></span><br><span class="line">                <span class="comment">//到MyDate去比较</span></span><br><span class="line">                <span class="comment">//封装</span></span><br><span class="line">                <span class="keyword">return</span> emp1.getBirthday().compareTo(emp2.getBirthday());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//排序后</span></span><br><span class="line">        System.out.println(employees);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型</title>
      <link href="/posts/a14eb637.html"/>
      <url>/posts/a14eb637.html</url>
      
        <content type="html"><![CDATA[<h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><ol><li>减少出错的可能</li></ol><p>​    比如：创建了一个数组里面放入了两个不同的类<br>​    遍历时会全部进行<strong>向下转型</strong>这时就会报错<br>​    （类型转换异常 <code>ClassCastException</code>）</p><p>​    2. 提高效率</p><p>​    比如：只有一个类时，遍历也会进行<strong>向下转型</strong><br>​    在数据量大的时候就会影响运行速度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">            <span class="comment">//向下转型——Object转成Dog类</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) o;</span><br><span class="line">            System.out.println(dog.getName()+<span class="string">&quot;-&quot;</span>+dog.getAge());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>使用泛型后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Dog dog : arrayList) &#123;</span><br><span class="line">            <span class="comment">//不需要向下转型直接使用</span></span><br><span class="line">            System.out.println(dog.getName()+<span class="string">&quot;-&quot;</span>+dog.getAge());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="泛型格式和语法"><a href="#泛型格式和语法" class="headerlink" title="泛型格式和语法"></a>泛型格式和语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Dog&gt; dog = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Dog&gt;()<span class="comment">//new 后面的ArrayList&lt;Dog&gt;里面的dog可以省略</span></span><br></pre></td></tr></table></figure><ol><li><p>泛型的声明</p><ul><li>可以放在接口中 <code>interface 接口 &lt;T&gt;&#123;&#125;</code></li><li><p>可以放在类中 <code>class 类 &lt;K,V&gt; &#123;&#125;</code></p></li><li><p><code>ArrayList&lt;&gt;</code>和<code>List&lt;&gt;</code>等等各种集合</p></li></ul></li></ol><p>​    <strong>T，K，V并不代表具体的值，只是代表类型，且任何字母都可以</strong></p><ol><li>泛型的实例化</li></ol><p>​    要在类名后面指定参数类型的值（类型）</p><p><code>List&lt;String&gt; strList = new ArrayList&lt;String&gt;();Iterator&lt;Customer&gt; iterator = customers.iterator();</code></p><hr><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><p><code>class &lt;T,R,G,.....&gt;&#123;//可以放多个泛型成员&#125;</code></p><ol><li>普通成员可以使用泛型（属性，方法）</li><li>使用泛型的数组不能初始化（不能 new ）</li><li><strong>静态方法</strong>不能使用类的泛型</li><li>泛型的类型，在创建对象就已经确定了</li><li>创建对象时没有指定类型默认是<strong>Object</strong></li></ol><hr><h2 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h2><p><code>interface &lt;T,R,G,.....&gt;&#123;//可以放多个泛型&#125;</code></p><ol><li>接口中，静态成员也不能使用泛型</li><li>泛型接口的类型是在<strong>继承接口</strong>或<strong>实现接口</strong>时确定</li><li>没有指定类型默认还是Object</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> <span class="keyword">extends</span> <span class="title class_">IUsb</span>&lt;String, Double&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们去实现 IA 接口时，因为 IA 在继承 IUsu 接口时，指定了 U 为 String R 为 Double</span></span><br><span class="line"><span class="comment">//，在实现 IUsu 接口的方法时，使用 String 替换 U, 是 Double 替换 R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">implements</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Double r1, Double r2, String u1, String u2)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现接口时，直接指定泛型接口的类型</span></span><br><span class="line"><span class="comment">//给 U 指定 Integer 给 R 指定了 Float</span></span><br><span class="line"><span class="comment">//所以，当我们实现 IUsb 方法时，会使用 Integer 替换 U, 使用 Float 替换 R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&lt;Integer, Float&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">get</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Float aFloat)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有指定类型，默认为 Object</span></span><br><span class="line"><span class="comment">//建议直接写成 IUsb&lt;Object,Object&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span> &#123; <span class="comment">//等价 class CC implements IUsb&lt;Object,Object&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U, R&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//U name; 不能这样使用</span></span><br><span class="line">    <span class="comment">//普通方法中，可以使用接口泛型</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(R r1, R r2, U u1, U u2)</span>;</span><br><span class="line">    <span class="comment">//在 jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h2><p><code>修饰符&lt;T,R,G,.....&gt;返回类型 方法名（参数列表）&#123;&#125;</code></p><ol><li>泛型方法可以定义在普通类中，也可以定义在泛型类中</li><li>泛型方法被调同，类型就确定</li><li>public void eat（E e）{}修饰符并没有T，R，G，所以这不是泛型方法而只是使用了泛型</li></ol><hr><h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><ol><li><p>泛型没有继承性</p><p><code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</code>错误的</p></li></ol><ol><li><p><code>&lt;?&gt;</code>: 支持任意泛型类型</p></li><li><p><code>&lt;? extends A&gt;</code> : 支持A类，以及A的子类，规定了泛型上限</p></li><li><p><code>&lt;? super A&gt;</code> : 支持A类，以及A的父类，规定了泛型下限</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExtends</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="comment">//泛型没有继承性</span></span><br><span class="line">        <span class="comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line">        <span class="comment">//举例说明下面三个方法的使用</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">        printCollection1(list1);</span><br><span class="line">        printCollection1(list2);</span><br><span class="line">        printCollection1(list3);</span><br><span class="line">        printCollection1(list4);</span><br><span class="line">        printCollection1(list5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? extends AA&gt; c：</span></span><br><span class="line">        <span class="comment">//表示 上限，可以接受 AA 或者 AA 子类</span></span><br><span class="line">        <span class="comment">// printCollection2(list1);//×</span></span><br><span class="line">        <span class="comment">// printCollection2(list2);//×</span></span><br><span class="line">        printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? super AA&gt; c:</span></span><br><span class="line">        <span class="comment">//支持 AA 类以及 AA 类的父类，不限于直接父类</span></span><br><span class="line">        printCollection3(list1);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">        printCollection3(list3);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list4);//×</span></span><br><span class="line">        <span class="comment">//printCollection3(list5);//×</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是 Object</span></span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? extends AA 表示 上限，可以接受 AA 或者 AA 子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? super 子类类名 AA:支持 AA 类以及 AA 类的父类，不限于直接父类，</span></span><br><span class="line">    <span class="comment">//规定了泛型的下限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java排序</title>
      <link href="/posts/7372a035.html"/>
      <url>/posts/7372a035.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序算法</span></span><br><span class="line">      <span class="type">int</span>[] numbers=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>&#125;;</span><br><span class="line">      <span class="comment">//需进行length-1次冒泡</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numbers.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;numbers.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(numbers[j]&gt;numbers[j+<span class="number">1</span>])&#123;</span><br><span class="line">                 temp=numbers[j];</span><br><span class="line">                  numbers[j]=numbers[j+<span class="number">1</span>];</span><br><span class="line">                  numbers[j+<span class="number">1</span>]=temp;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;从小到大排序后的结果是:&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)</span><br><span class="line">      System.out.print(numbers[i]+<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/posts/e3345db4.html"/>
      <url>/posts/e3345db4.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组可以存放多个同一类型的数据</p><p>数组也是一种数据类型，是引用类型。</p><p>即：<strong>数(数据)组(一组)就是一组数据</strong></p><p>定义数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素的数据类型（double int 等)[] 数组名称 = &#123;数组元素&#125;</span></span><br><span class="line"><span class="type">double</span>[] arr1 = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3.4</span>, <span class="number">2</span>, <span class="number">50</span>, <span class="number">7.8</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>通常使用for循环来遍历数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,-<span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//length表示数组的长度</span></span><br><span class="line"> System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过<strong>数组名.length</strong>得到数组的大小/长度</p><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><p>步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建一个新的数组arr2,开辟新的数据空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br></pre></td></tr></table></figure></li><li><p>遍历 arr1 ，把每个元素拷贝到 arr2 对应的元素位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h2><p>1) 基本数据类型赋值，这个值就是具体的数据，而且相互不影响。</p><p>2) 数组在默认情况下是引用传递，赋的值是地址</p><h2 id="数组添加-扩容"><a href="#数组添加-扩容" class="headerlink" title="数组添加/扩容"></a>数组添加/扩容</h2><p>初始数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;<span class="comment">//下标 0-2</span></span><br></pre></td></tr></table></figure><ol><li><p>定义一个新的数组 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br></pre></td></tr></table></figure></li><li><p>遍历 arr 数组，依次将 arr 的元素拷贝到 arrNew 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arrNew[i] = arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>将 4 赋给 arrNew[arrNew.length - 1] = 4;把 4 赋给 arrNew 最后一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">arrNew[arrNew.length - <span class="number">1</span>] = addNum;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>让 arr 指向 arrNew </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = arrNew;</span><br></pre></td></tr></table></figure></li></ol><h2 id="多维数组——二维数组"><a href="#多维数组——二维数组" class="headerlink" title="多维数组——二维数组"></a>多维数组——二维数组</h2><p>语法:：</p><ol><li>类型 $[][]$ 数组名=new 类型$[大小][大小]$    </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>​    赋值</p><ol><li>先声明再定义：<br>类型 数组名$[][]$;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][];</span><br></pre></td></tr></table></figure><p>​    数组名 = new 类型$[大小][大小]$    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[][];</span><br></pre></td></tr></table></figure><p>​    赋值</p><ol><li>直接赋值，直接使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;, &#123;<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>&#125;, &#123;<span class="number">100</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组使用注意事项和细节"><a href="#数组使用注意事项和细节" class="headerlink" title="数组使用注意事项和细节"></a>数组使用注意事项和细节</h2><p>1) 数组是多个相同类型数据的组合，实现对这些数据的统一管理<br>2) 数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。<br>3) 数组创建后，如果没有赋值，有默认值</p><p>​    int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，    boolean false，String null</p><p>4) 使用数组的步骤 </p><ul><li>声明数组并开辟空间 </li><li>给数组各个元素赋值 </li><li>使用数组</li></ul><p>5) 数组的<strong>下标是从</strong> <strong>0</strong> <strong>开始的</strong>。</p><p>6) 数组下标必须在指定范围内使用，否则报：下标越界异常</p><p>   比如</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>   有效下标为 0-4</p><p>​    7.  数组属引用类型，数组型数据是对象(object)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java程序结构控制</title>
      <link href="/posts/656be5bd.html"/>
      <url>/posts/656be5bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><ol><li><p>顺序控制</p><p>执行语句1</p><p>执行语句2</p><p>执行语句3</p><p>执行语句4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1 + <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1 + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">12</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>分支控制</p><ul><li><p>单分支 if</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if-else</span></span><br><span class="line"><span class="comment">//基本语法</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行代码块(可以有多条语句);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为ture时执行&#123;&#125;里面的代码</span></span><br><span class="line"><span class="comment">//为false则不执行</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">编写一个程序,可以输入人的年龄,如果该同志的年龄大于 18 岁, 则输出 &quot;年龄大于 18,送入监狱&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="comment">//把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//使用 if 判断，输出对应信息</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年龄大于 18,送入监狱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>双分支 if-else</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编写一个程序,可以输入人的年龄,如果该人年龄大于 18 岁, 则输出 &quot;年龄大于 18,送入监狱&quot;。否则 ,输出&quot;年龄小于18,无罪释放&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="comment">//把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//使用 if-else 判断，输出对应信息</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年龄大于 18,送入监狱&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//双分支</span></span><br><span class="line">System.out.println(<span class="string">&quot;年龄小于18,无罪释放&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>多分支 if-else if -….-else</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入保国同志的芝麻信用分：</span></span><br><span class="line"><span class="comment">如果：</span></span><br><span class="line"><span class="comment">信用分为 100 分时，输出 信用极好；</span></span><br><span class="line"><span class="comment">信用分为(80，99]时，输出 信用优秀；</span></span><br><span class="line"><span class="comment">信用分为[60,80]时，输出 信用一般；</span></span><br><span class="line"><span class="comment">其它情况 ，输出 信用 不及格</span></span><br><span class="line"><span class="comment">请从键盘输入保国的芝麻信用分，并加以判断</span></span><br><span class="line"><span class="comment">假定信用分数为 int</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//接收用户输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入信用分(1-100):&quot;</span>)</span><br><span class="line"><span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//先对输入的信用分，进行一个范围的有效判断 1-100, 否则提示输入错误</span></span><br><span class="line"><span class="keyword">if</span>(grade &gt;=<span class="number">1</span> &amp;&amp; grade &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">//因为有 4 种情况，所以使用多分支</span></span><br><span class="line">    <span class="keyword">if</span>(grade == <span class="number">100</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;信用极好&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &gt; <span class="number">80</span> &amp;&amp; grade &lt;= <span class="number">99</span>) &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;信用优秀&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &gt;= <span class="number">60</span> &amp;&amp; grade &lt;= <span class="number">80</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;信用一般&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//其它情况 ，输出 信用 不及格</span></span><br><span class="line">    System.out.println(<span class="string">&quot;信用不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;信用分需要在 1-100,请重新输入:)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套分支(最好不要超过3层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="comment">//if-else</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//if-else</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch 分支结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量n:</span><br><span class="line">语句块n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">default</span>语句块;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果表达式等于某个常量就执行该常量对应的语句块</span></span><br><span class="line"><span class="comment">//break表示退出swtich</span></span><br><span class="line"><span class="comment">//如果没有匹配上就执行default</span></span><br><span class="line"><span class="comment">//表达式的数据类型要和常量保持一致（可自动转换）</span></span><br></pre></td></tr></table></figure><p><strong>判断的具体数值不多</strong>且符合  byte , short , int , char, enum , String 这 6 种类型建议使用 swtich 语句</p><p>对<strong>区间判断，对结果为 boolean 类型</strong>判断，使用 if</p></li></ul><ol><li><p>循环控制</p><ul><li><p>for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*for循环四要素: </span></span><br><span class="line"><span class="comment">(1)循环变量初始化</span></span><br><span class="line"><span class="comment">(2)循环条件</span></span><br><span class="line"><span class="comment">(3)循环操作</span></span><br><span class="line"><span class="comment">(4)循环变量迭代</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Java&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印 1~100 之间所有是9的倍数的整数，统计个数及和.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//统计 9 的倍数个数 变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 倍数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>( i % t == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">    count++;</span><br><span class="line">    sum += i;<span class="comment">//累积</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*while循环四要素: </span></span><br><span class="line"><span class="comment">(1)循环变量初始化</span></span><br><span class="line"><span class="comment">(2)循环条件</span></span><br><span class="line"><span class="comment">(3)循环操作</span></span><br><span class="line"><span class="comment">(4)循环变量迭代</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">循环体(语句);</span><br><span class="line">循环变量迭代;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//循环变量初始化</span></span><br><span class="line"><span class="keyword">while</span>( i &lt;= <span class="number">10</span> ) &#123;<span class="comment">//循环条件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Java&quot;</span> + i);<span class="comment">//执行语句</span></span><br><span class="line">    i++;<span class="comment">//循环变量迭代</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*do-while循环四要素: </span></span><br><span class="line"><span class="comment">(1)循环变量初始化</span></span><br><span class="line"><span class="comment">(2)循环条件</span></span><br><span class="line"><span class="comment">(3)循环操作</span></span><br><span class="line"><span class="comment">(4)循环变量迭代</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//循环变量初始化</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体(语句);</span><br><span class="line">循环变量迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//循环变量初始化</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Java&quot;</span> + i);<span class="comment">//执行语句</span></span><br><span class="line">    i++;<span class="comment">//循环变量迭代</span></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">10</span>);<span class="comment">//循环条件</span></span><br><span class="line">System.out.println(<span class="string">&quot;退出do-while循环&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>do-while 循环是先执行，再判断， 因此它至少执行一次</strong></p></li><li><p>多重循环控制（重点）</p><p>本质就是<strong>嵌套循环</strong></p><p>内层循环当成外层循环的循环体。当只有内层循环的循环条件为 false 时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计 3 个班成绩情况，每个班有 5 名同学，</span></span><br><span class="line"><span class="comment">求出各个班的平均分</span></span><br><span class="line"><span class="comment">所有班级的平均分[学生的成绩从键盘输入]。</span></span><br><span class="line"><span class="comment">统计三个班及格人数，每个班有 5 名同学</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">double</span> <span class="variable">totalScore</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//累积所有学生的成绩</span></span><br><span class="line"><span class="type">int</span> <span class="variable">passNum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//累积 及格人数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">classNum</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">//班级个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">stuNum</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//学生个数</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= classNum; i++) &#123;<span class="comment">//i 表示班级</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//一个班级的总分</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= stuNum; j++) &#123;<span class="comment">//j 表示学生</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请数第&quot;</span>+i+<span class="string">&quot;个班的第&quot;</span>+j+<span class="string">&quot;个学生的成绩&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> myScanner.nextDouble();</span><br><span class="line">                <span class="comment">//当有一个学生成绩&gt;=60, passNum++</span></span><br><span class="line">            <span class="keyword">if</span>(score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            passNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += score; <span class="comment">//累积</span></span><br><span class="line">            System.out.println(<span class="string">&quot;成绩为&quot;</span> + score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为 sum 是 5 个学生的总成绩</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot; 平均分=&quot;</span> + (sum / stuNum));</span><br><span class="line">        <span class="comment">//把 sum 累积到 totalScore</span></span><br><span class="line">        totalScore += sum;</span><br><span class="line"> &#125;</span><br><span class="line">System.out.println(<span class="string">&quot;三个班总分=&quot;</span>+ totalScore</span><br><span class="line">+ <span class="string">&quot; 平均分=&quot;</span> + totalScore / (classNum*stuNum));</span><br><span class="line">System.out.println(<span class="string">&quot;及格人数=&quot;</span> + passNum)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><ol><li>break语句</li></ol><p>​    <strong>break</strong> <strong>语句用于终止某个语句块的执行</strong></p><p>​    一般使用在 switch 或者循环[for , while , do-while]中</p><p>​    2.continue语句</p><p>​    <strong>continue</strong> <strong>语句用于结束本次循环</strong>，<strong>继续执行下一次循环</strong></p><p>​    continue 语句出现在多层嵌套的循环语句体中时，可以通过标签指    明要跳过的是哪一层循环</p><p>​    3.return语句</p><p>​    <strong>return 使用在方法，表示跳出所在的方法</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topora语法</title>
      <link href="/posts/6420b961.html"/>
      <url>/posts/6420b961.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown的使用说明"><a href="#markdown的使用说明" class="headerlink" title="markdown的使用说明"></a>markdown的使用说明</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><blockquote><p>语法：# (一级标题)  ## (二级标题)  ### (三级标题) ……</p><p>代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 这是一级标题</span><br><span class="line">&gt;## 这是二级标题</span><br></pre></td></tr></table></figure><p>效果:  </p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>快捷键:</p><ul><li>Ctrl+数字1~6可以快速将选中的文本调成对应级别的标题</li><li>Ctrl+0可以快速将选中的文本调成普通文本</li><li>Ctrl+加号/减号对标题级别进行加减</li></ul></blockquote><h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="1、换行"><a href="#1、换行" class="headerlink" title="1、换行"></a>1、换行</h3><blockquote><p>代码:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个段落</span><br><span class="line">&gt;这是一个段落</span><br></pre></td></tr></table></figure><p>效果: </p><p>这是一个段落<br>这是一个段落</p></blockquote><h3 id="2、分割线"><a href="#2、分割线" class="headerlink" title="2、分割线"></a>2、分割线</h3><blockquote><p>语法:  —-或者<em>*</em>+回车</p><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;---或者***</span><br></pre></td></tr></table></figure><p>效果:</p><hr></blockquote><h2 id="三、文字显示"><a href="#三、文字显示" class="headerlink" title="三、文字显示"></a>三、文字显示</h2><h3 id="1、字体"><a href="#1、字体" class="headerlink" title="1、字体"></a>1、字体</h3><blockquote><p>语法:</p><ul><li>粗体:  用一对双星号包裹</li><li>删除线:  用一对双飘号包裹</li><li>下划线:  用一对u标签包裹</li><li>斜体:  用一对单星号包裹</li><li>高亮:  用一对双等号包裹</li></ul><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;**这是粗体**</span><br><span class="line">&gt;~~这是删除线~~</span><br><span class="line">&gt;&lt;u&gt;这是下划线&lt;/u&gt;</span><br><span class="line">&gt;*这是斜体*</span><br><span class="line">&gt;==这是高亮==</span><br></pre></td></tr></table></figure><p>效果:<br><strong>这是粗体</strong><br><del>这是删除线</del><br><u>这是下划线</u><br><em>这是斜体</em><br>==这是高亮==</p><p>快捷键:</p><ul><li>加粗:  Ctrl+B</li><li>删除线:  Shift+Alt+5</li><li>下划线:  Ctrl+U</li><li>斜体:  Ctrl+I</li></ul></blockquote><h3 id="2、上下标"><a href="#2、上下标" class="headerlink" title="2、上下标"></a>2、上下标</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;x^2^</span><br><span class="line">&gt;H~2~O</span><br></pre></td></tr></table></figure><p>效果:<br>x^2^<br>H~2~O</p></blockquote><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;*/-/+ +空格</span><br></pre></td></tr></table></figure><p>效果:<br>1.只有同一级别:</p><ul><li>苹果</li><li>香蕉</li><li>橘子</li></ul><p>2.子集类:</p><ul><li>一级分类<ul><li>二级分类 <ul><li>三级分类</li></ul></li></ul></li></ul><p>快捷键:  Ctrl+Shift+]</p></blockquote><h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;数字+.+空格</span><br></pre></td></tr></table></figure><p>效果:</p><ol><li>第一个标题</li><li>第二个标题</li><li><p>第三个标题</p><ul><li>子内容1<ul><li>子内容2</li></ul></li></ul></li><li>第四个标题</li></ol><p>快捷键:  Ctrl+Shift+[</p></blockquote><h3 id="3、任务列表"><a href="#3、任务列表" class="headerlink" title="3、任务列表"></a>3、任务列表</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;- [ ] 吃早餐</span><br><span class="line">&gt;- [x] 背单词</span><br></pre></td></tr></table></figure><p>效果:</p><ul><li>[ ] 吃早餐</li><li>[x] 背单词</li></ul></blockquote><h2 id="五、区块显示"><a href="#五、区块显示" class="headerlink" title="五、区块显示"></a>五、区块显示</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;+回车</span><br></pre></td></tr></table></figure><p>效果:</p><blockquote><p>这是最外层区块</p><blockquote><p>这是内层区块</p><blockquote><p>这是最内层区块</p></blockquote></blockquote></blockquote></blockquote><h2 id="六、代码显示"><a href="#六、代码显示" class="headerlink" title="六、代码显示"></a>六、代码显示</h2><h3 id="1、行内代码"><a href="#1、行内代码" class="headerlink" title="1、行内代码"></a>1、行内代码</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;`int a=0;`（说明：`位于Esc下面）</span><br></pre></td></tr></table></figure><p>效果:<br><code>int a=0;</code></p><p>快捷键:  Ctrl+Shift+`</p></blockquote><h3 id="2、代码块"><a href="#2、代码块" class="headerlink" title="2、代码块"></a>2、代码块</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;```js/java/c#/text</span><br><span class="line">&gt;内容</span><br><span class="line">&gt;```</span><br></pre></td></tr></table></figure><p>快捷键:  Ctrl+Shift+K</p></blockquote><h2 id="七、链接"><a href="#七、链接" class="headerlink" title="七、链接"></a>七、链接</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;www.baidu.com</span><br><span class="line">&gt;[百度一下](https://www.baidu.com)</span><br><span class="line">&gt;[百度一下](https://www.baidu.com &quot;https://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure><p>效果:<br>www.baidu.com<br><a href="https://www.baidu.com">百度一下</a><br><a href="https://www.baidu.com" title="https://www.baidu.com">百度一下</a></p><p>快捷键:  Ctrl+K</p></blockquote><h2 id="八、脚注"><a href="#八、脚注" class="headerlink" title="八、脚注"></a>八、脚注</h2><blockquote><p>说明:  对文本进行解释说明。</p><p>代码: </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;[^文本]</span><br><span class="line">&gt;[^文本]:解释说明</span><br></pre></td></tr></table></figure><p>效果:<br>这是一个技术<sup><a href="#fn_①" id="reffn_①">①</a></sup></p><blockquote id="fn_①"><sup>①</sup>. 这是一个非常好用的框架。<a href="#reffn_①" title="Jump back to footnote [①] in the text."> &#8617;</a></blockquote></blockquote><h2 id="九、图片插入"><a href="#九、图片插入" class="headerlink" title="九、图片插入"></a>九、图片插入</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;![不显示的文字](图片路径 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure><p>效果:<br><img src="C:\Users\asus\Pictures\Saved Pictures\Snipaste_2020-09-03_13-19-11.png" alt="This is a picture" title="漫步图"></p><p>(注：效果路径为C:\Users\asus\Pictures\Saved Pictures\Snipaste_2020-09-03_13-19-11.png。在其他电脑上可能不显示。)</p><p>快捷键:  Ctrl+Shift+I</p></blockquote><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;|  1   |  2   |  3   |</span><br><span class="line">&gt;| :--- | :--: | ---: |</span><br><span class="line">&gt;|  4   |  5   |  6   |</span><br><span class="line">&gt;|  7   |  8   |  9   |</span><br><span class="line">&gt;|  10  |  11  |  12  |</span><br></pre></td></tr></table></figure><p>效果:</p><div class="table-container"><table><thead><tr><th>1</th><th style="text-align:center">2</th><th style="text-align:right">3</th></tr></thead><tbody><tr><td>4</td><td style="text-align:center">5</td><td style="text-align:right">6</td></tr><tr><td>7</td><td style="text-align:center">8</td><td style="text-align:right">9</td></tr><tr><td>10</td><td style="text-align:center">11</td><td style="text-align:right">12</td></tr></tbody></table></div><p>快捷键:  Ctrl+T</p></blockquote><h2 id="十一、流程图"><a href="#十一、流程图" class="headerlink" title="十一、流程图"></a>十一、流程图</h2><h3 id="1、横向流程图"><a href="#1、横向流程图" class="headerlink" title="1、横向流程图"></a>1、横向流程图</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形]==&gt;B(圆角)</span><br><span class="line">B==&gt;C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a=1|D[结果1]</span><br><span class="line">C--&gt;|a=2|E[结果2]</span><br><span class="line">F[横向流程图]</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;graph LR</span><br><span class="line">&gt;A[方形]==&gt;B(圆角)</span><br><span class="line">&gt;B==&gt;C&#123;条件a&#125;</span><br><span class="line">&gt;C--&gt;|a=1|D[结果1]</span><br><span class="line">&gt;C--&gt;|a=2|E[结果2]</span><br><span class="line">&gt;F[横向流程图]</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、竖向流程图"><a href="#2、竖向流程图" class="headerlink" title="2、竖向流程图"></a>2、竖向流程图</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[方形]==&gt;B(圆角)</span><br><span class="line">B==&gt;C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a=1|D[结果1]</span><br><span class="line">C--&gt;|a=2|E[结果2]</span><br><span class="line">F[竖向流程图]</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;graph TD</span><br><span class="line">&gt;A[方形]==&gt;B(圆角)</span><br><span class="line">&gt;B==&gt;C&#123;条件a&#125;</span><br><span class="line">&gt;C--&gt;|a=1|D[结果1]</span><br><span class="line">&gt;C--&gt;|a=2|E[结果2]</span><br><span class="line">&gt;F[竖向流程图]</span><br></pre></td></tr></table></figure></blockquote><h2 id="十二、表情符号"><a href="#十二、表情符号" class="headerlink" title="十二、表情符号"></a>十二、表情符号</h2><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;:happy:、:cry:、:man:</span><br></pre></td></tr></table></figure><p>效果:<br>:happy:、 :cry:、 :man:</p></blockquote><h2 id="十三、数学公式的输入"><a href="#十三、数学公式的输入" class="headerlink" title="十三、数学公式的输入"></a>十三、数学公式的输入</h2><h3 id="1、公式的插入"><a href="#1、公式的插入" class="headerlink" title="1、公式的插入"></a>1、公式的插入</h3><h4 id="①行中公式"><a href="#①行中公式" class="headerlink" title="①行中公式"></a>①行中公式</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$公式$</span><br></pre></td></tr></table></figure><p>效果:<br>$公式$</p></blockquote><h4 id="②独立公式"><a href="#②独立公式" class="headerlink" title="②独立公式"></a>②独立公式</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;公式</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure><p>效果:</p><script type="math/tex; mode=display">公式</script></blockquote><h3 id="2、上下标-1"><a href="#2、上下标-1" class="headerlink" title="2、上下标"></a>2、上下标</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;$x^&#123;y^z&#125;=(1+e^x)^&#123;-2xy^w&#125;$</span><br><span class="line">&gt;$\sideset&#123;^1_2&#125;&#123;^3_4&#125;&#123;\underset&#123;6&#125;\bigotimes&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$x^{y^z}=(1+e^x)^{-2xy^w}$<br>$\sideset{^1_2}{^3_4}{\underset{6}\bigotimes}$</p></blockquote><h3 id="3、括号和分隔符"><a href="#3、括号和分隔符" class="headerlink" title="3、括号和分隔符"></a>3、括号和分隔符</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\langle\quad\rangle\quad\lceil\quad\rceil\quad\lfloor\quad\rfloor\quad\lbrace\quad\rbrace\quad\lVert\quad\rVert$</span><br><span class="line">&gt;$f(x,y,z)=3y^2z\left(3+\dfrac&#123;7x+5&#125;&#123;1+y^2&#125;\right)$</span><br><span class="line">&gt;$\left.\dfrac&#123;\mathrm&#123;d&#125;u&#125;&#123;\mathrm&#123;d&#125;x&#125;\right|_&#123;x=0&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$\langle\quad\rangle\quad\lceil\quad\rceil\quad\lfloor\quad\rfloor\quad\lbrace\quad\rbrace\quad\lVert\quad\rVert$<br>$f(x,y,z)=3y^2z\left(3+\dfrac{7x+5}{1+y^2}\right)$<br>$\left.\dfrac{\mathrm{d}u}{\mathrm{d}x}\right|_{x=0}$</p></blockquote><h3 id="4、分数"><a href="#4、分数" class="headerlink" title="4、分数"></a>4、分数</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\frac&#123;a&#125;&#123;b&#125;\quad\dfrac&#123;a&#125;&#123;b&#125;\quad &#123;a\over b&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$\frac{a}{b}\quad\dfrac{a}{b}\quad {a\over b}$</p></blockquote><h3 id="5、开方"><a href="#5、开方" class="headerlink" title="5、开方"></a>5、开方</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\sqrt[根指数,省略时为2]&#123;被开方数&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$\sqrt{2}\quad\sqrt[3]{2}$</p></blockquote><h3 id="6、省略号"><a href="#6、省略号" class="headerlink" title="6、省略号"></a>6、省略号</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\cdots\quad\ldots\quad\vdots\quad\ddots$</span><br></pre></td></tr></table></figure><p>效果:<br>$\cdots\quad\ldots\quad\vdots\quad\ddots$</p></blockquote><h3 id="7、矢量和均值"><a href="#7、矢量和均值" class="headerlink" title="7、矢量和均值"></a>7、矢量和均值</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\overrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overleftarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overleftrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underleftarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\underleftrightarrow&#123;E(\vec&#123;r&#125;)&#125;\quad\overline&#123;v&#125;=\bar&#123;v&#125;\quad\underline&#123;v&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$\overrightarrow{E(\vec{r})}\quad\overleftarrow{E(\vec{r})}\quad\overleftrightarrow{E(\vec{r})}\quad\underrightarrow{E(\vec{r})}\quad\underleftarrow{E(\vec{r})}\quad\underleftrightarrow{E(\vec{r})}\quad\overline{v}=\bar{v}\quad\underline{v}$</p></blockquote><h3 id="8、积分"><a href="#8、积分" class="headerlink" title="8、积分"></a>8、积分</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;\iint\limits_D\left(\dfrac&#123;\partial Q&#125;&#123;\partial x&#125;-\dfrac&#123;\partial P&#125;&#123;\partial y&#125;\right)&#123;\rm d&#125;x&#123;\rm d&#125;y=\oint\limits_LP&#123;\rm d&#125;x+Q&#123;\rm d&#125;y</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure><p>效果:</p><script type="math/tex; mode=display">\iint\limits_D\left(\dfrac{\partial Q}{\partial x}-\dfrac{\partial P}{\partial y}\right){\rm d}x{\rm d}y=\oint\limits_LP{\rm d}x+Q{\rm d}y</script></blockquote><h3 id="9、极限"><a href="#9、极限" class="headerlink" title="9、极限"></a>9、极限</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\lim\limits_&#123;n\to\infin&#125;(1+\dfrac&#123;1&#125;&#123;n&#125;)^n=e$</span><br></pre></td></tr></table></figure><p>效果:<br>$\lim\limits_{n\to\infin}(1+\dfrac{1}{n})^n=e$</p></blockquote><h3 id="10、累加、累乘及交集、并集"><a href="#10、累加、累乘及交集、并集" class="headerlink" title="10、累加、累乘及交集、并集"></a>10、累加、累乘及交集、并集</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\sum\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\prod\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\bigcup\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;\quad and\quad\bigcap\limits_&#123;i=1&#125;^n\dfrac&#123;1&#125;&#123;n^2&#125;$</span><br></pre></td></tr></table></figure><p>效果:<br>$\sum\limits<em>{i=1}^n\dfrac{1}{n^2}\quad and\quad\prod\limits</em>{i=1}^n\dfrac{1}{n^2}\quad and\quad\bigcup\limits<em>{i=1}^n\dfrac{1}{n^2}\quad and\quad\bigcap\limits</em>{i=1}^n\dfrac{1}{n^2}$</p></blockquote><h3 id="11、希腊字母"><a href="#11、希腊字母" class="headerlink" title="11、希腊字母"></a>11、希腊字母</h3><div class="table-container"><table><thead><tr><th>语法</th><th>字母</th><th>语法</th><th>字母</th><th>语法</th><th>字母</th></tr></thead><tbody><tr><td>\Alpha(\alpha)</td><td>$\Alpha(\alpha)$</td><td>\Beta(\beta)</td><td>$\Beta(\beta)$</td><td>\Gamma(\gamma)</td><td>$\Gamma(\gamma)$</td></tr><tr><td>\Epsilon(\epsilon)\varepsilon</td><td>$\Epsilon(\epsilon)\varepsilon$</td><td>\Zeta(\zeta)</td><td>$\Zeta(\zeta)$</td><td>\Eta(\eta)</td><td>$\Eta(\eta)$</td></tr><tr><td>\Iota(\iota)</td><td>$\Iota(\iota)$</td><td>\Kappa(\kappa)\varkappa</td><td>$\Kappa(\kappa)\varkappa$</td><td>\Lambda(\lambda)</td><td>$\Lambda(\lambda)$</td></tr><tr><td>\Nu(\nu)</td><td>$\Nu(\nu)$</td><td>\Xi(\xi)</td><td>$\Xi(\xi)$</td><td>\Omicron(\omicron)</td><td>$\Omicron(\omicron)$</td></tr><tr><td>\Rho(\rho)\varrho</td><td>$\Rho(\rho)\varrho$</td><td>\Sigma(\sigma)\varsigma</td><td>$\Sigma(\sigma)\varsigma$</td><td>\Tau(\tau)</td><td>$\Tau(\tau)$</td></tr><tr><td>\Phi(\phi)\varphi</td><td>$\Phi(\phi)\varphi$</td><td>\Chi(\chi)</td><td>$\Chi(\chi)$</td><td>\Psi(\psi)</td><td>$\Psi(\psi)$</td></tr><tr><td>\Delta(\delta)</td><td>$\Delta(\delta)$</td><td>\Theta(\theta)\vartheta</td><td>$\Theta(\theta)\vartheta$</td><td>\Mu(\mu)</td><td>$\Mu(\mu)$</td></tr><tr><td>\Pi(\pi)\varpi</td><td>$\Pi(\pi)\varpi$</td><td>\Omega(\omega)</td><td>$\Omega(\omega)$</td><td>\upsilon</td><td>$\upsilon$</td></tr><tr><td>\ell</td><td>$\ell$</td><td>\eth</td><td>$\eth$</td><td>\hbar</td><td>$\hbar$</td></tr><tr><td>\hslash</td><td>$\hslash$</td><td>\mho</td><td>$\mho$</td><td>\partial</td><td>$\partial$</td></tr></tbody></table></div><h3 id="12、特殊字符"><a href="#12、特殊字符" class="headerlink" title="12、特殊字符"></a>12、特殊字符</h3><h4 id="①说明"><a href="#①说明" class="headerlink" title="①说明"></a>①说明</h4><blockquote><p>可以在字符前使用<code>\large</code>或<code>\small</code>以显示更大或更小的字符。${\LARGE A}{\Large A}{\large A}A{\small A}$</p></blockquote><h4 id="②关系运算符"><a href="#②关系运算符" class="headerlink" title="②关系运算符"></a>②关系运算符</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\pm(\mp)</td><td>$\pm(\mp)$</td><td>\times</td><td>$\times$</td><td>\div</td><td>$\div$</td></tr><tr><td>\nmid</td><td>$\nmid$</td><td>\cdot</td><td>$\cdot$</td><td>\mid</td><td>$\mid$</td></tr><tr><td>\bigodot</td><td>$\bigodot$</td><td>\bigotimes</td><td>$\bigotimes$</td><td>\bigoplus</td><td>$\bigoplus$</td></tr><tr><td>\ge</td><td>$\ge$</td><td>\le</td><td>$\le$</td><td>\ll</td><td>$\ll$</td></tr><tr><td>\geqslant</td><td>$\geqslant$</td><td>\leqslant</td><td>$\leqslant$</td><td>\neq</td><td>$\neq$</td></tr><tr><td>\approx</td><td>$\approx$</td><td>\xlongequal{文本}</td><td>$\xlongequal{文本}$</td><td>\triangleq</td><td>$\triangleq$</td></tr><tr><td>\sim</td><td>$\sim$</td><td>\doteq</td><td>$\doteq$</td><td>\equiv</td><td>$\equiv$</td></tr><tr><td>\cong</td><td>$\cong$</td><td>\propto</td><td>$\propto$</td><td>\parallel(\</td><td>)</td></tr><tr><td>\prec</td><td>$\prec$</td><td>\pmod{2}</td><td>$\pmod{2}$</td><td>\bmod</td><td>$\bmod{2}$</td></tr></tbody></table></div><h4 id="③集合运算符"><a href="#③集合运算符" class="headerlink" title="③集合运算符"></a>③集合运算符</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\emptyset</td><td>$\emptyset$</td><td>\varnothing</td><td>$\varnothing$</td><td></td><td></td></tr><tr><td>\subset</td><td>$\subset$</td><td>\subseteq</td><td>$\subseteq$</td><td>\subsetneq</td><td>$\subsetneq$</td></tr><tr><td>\supset</td><td>$\supset$</td><td>\supseteq</td><td>$\supseteq$</td><td>\supsetneq</td><td>$\supsetneq$</td></tr><tr><td>\bigcap</td><td>$\bigcap$</td><td>\bigcup</td><td>$\bigcup$</td><td>\setminus</td><td>$\setminus$</td></tr><tr><td>\bigvee</td><td>$\bigvee$</td><td>\bigwedge</td><td>$\bigwedge$</td><td></td><td></td></tr><tr><td>\in</td><td>$\in$</td><td>\notin</td><td>$\notin$</td><td>\ni</td><td>$\ni$</td></tr></tbody></table></div><h4 id="④三角运算符"><a href="#④三角运算符" class="headerlink" title="④三角运算符"></a>④三角运算符</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\circ</td><td>$\circ$</td><td>\bot</td><td>$\bot$</td><td>\angle</td><td>$\angle$</td></tr><tr><td>\degree</td><td>$\degree$</td><td></td><td></td><td></td></tr></tbody></table></div><h4 id="⑤微积分运算符"><a href="#⑤微积分运算符" class="headerlink" title="⑤微积分运算符"></a>⑤微积分运算符</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\int</td><td>$\int$</td><td>\iint</td><td>$\iint$</td><td>\iiint</td><td>$\iiint$</td></tr><tr><td>\oint</td><td>$\oint$</td><td>\oiint</td><td>$\oiint$</td><td>\prime(‘)</td><td>$\prime$</td></tr><tr><td>\lim</td><td>$\lim$</td><td>\infin</td><td>$\infin$</td><td>\nabla</td><td>$\nabla$</td></tr><tr><td>\grad</td><td>$\grad$</td><td></td><td></td><td></td></tr></tbody></table></div><h4 id="⑥逻辑运算符"><a href="#⑥逻辑运算符" class="headerlink" title="⑥逻辑运算符"></a>⑥逻辑运算符</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\because</td><td>$\because$</td><td>\therefore</td><td>$\therefore$</td><td></td><td></td></tr><tr><td>\forall</td><td>$\forall$</td><td>\exist</td><td>$\exist$</td><td></td><td></td></tr><tr><td>\not&gt;</td><td>$\not&gt;$</td><td>\not&lt;</td><td>$\not&lt;$</td><td></td><td></td></tr><tr><td>\land</td><td>$\land$</td><td>\lor</td><td>$\lor$</td><td>\lnot</td><td>$\lnot$</td></tr><tr><td>\top</td><td>$\top$</td><td>\vdash</td><td>$\vdash$</td><td>\vDash</td><td>$\vDash$</td></tr></tbody></table></div><h4 id="⑦带帽符号"><a href="#⑦带帽符号" class="headerlink" title="⑦带帽符号"></a>⑦带帽符号</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\hat{xy}</td><td>$\hat{xy}$</td><td>\widehat{xyz}</td><td>$\widehat{xyz}$</td></tr><tr><td>\tilde{xy}</td><td>$\tilde{xy}$</td><td>\widetilde{xyz}</td><td>$\widetilde{xyz}$</td></tr><tr><td>\check{x}</td><td>$\check{x}$</td><td>\breve{y}</td><td>$\breve{y}$</td></tr><tr><td>\grave{x}</td><td>$\grave{x}$</td><td>\acute{y}</td><td>$\acute{y}$</td></tr><tr><td>\dot{x}</td><td>$\dot{x}$</td><td>\ddot{x}</td><td>$\ddot{x}$</td></tr><tr><td>\overparen{xy}</td><td>$\overparen{xy}$</td><td></td></tr></tbody></table></div><h4 id="⑧选取符号"><a href="#⑧选取符号" class="headerlink" title="⑧选取符号"></a>⑧选取符号</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\fbox{a+b+c+d}</td><td>$\fbox{a+b+c+d}$</td><td></td><td></td></tr><tr><td>\overbrace{xx\cdots x}^{10个x}</td><td>$\overbrace{xx\cdots x}^{10个x}$</td><td>\underbrace{xx\cdots x}_{10个x}</td><td>$\underbrace{xx\cdots x}_{10个x}$</td></tr></tbody></table></div><h4 id="⑨箭头符号"><a href="#⑨箭头符号" class="headerlink" title="⑨箭头符号"></a>⑨箭头符号</h4><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>\leftarrow</td><td>$\leftarrow$</td><td>\rightarrow</td><td>$\rightarrow$</td><td>\leftrightarrow</td><td>$\leftrightarrow$</td></tr><tr><td>\longleftarrow</td><td>$\longleftarrow$</td><td>\longrightarrow</td><td>$\longrightarrow$</td><td>\longleftrightarrow</td><td>$\longleftrightarrow$</td></tr><tr><td>\Leftarrow</td><td>$\Leftarrow$</td><td>\Rightarrow</td><td>$\Rightarrow$</td><td>\Leftrightarrow</td><td>$\Leftrightarrow$</td></tr><tr><td>\Longleftarrow</td><td>$\Longleftarrow$</td><td>\Longrightarrow</td><td>$\Longrightarrow$</td><td>\Longleftrightarrow</td><td>$\Longleftrightarrow$</td></tr><tr><td>\uparrow</td><td>$\uparrow$</td><td>\downarrow</td><td>$\downarrow$</td><td>\updownarrow</td><td>$\updownarrow$</td></tr><tr><td>\Uparrow</td><td>$\Uparrow$</td><td>\Downarrow</td><td>$\Downarrow$</td><td>\Updownarrow</td><td>$\Updownarrow$</td></tr><tr><td>\to</td><td>$\to$</td><td>\swarrow</td><td>$\swarrow$</td><td>\nearrow</td><td>$\nearrow$</td></tr><tr><td>\gets</td><td>$\gets$</td><td>\searrow</td><td>$\searrow$</td><td>\nwarrow</td><td>$\nwarrow$</td></tr><tr><td>\mapsto</td><td>$\mapsto$</td><td>\rightrightarrows</td><td>$\rightrightarrows$</td><td></td></tr></tbody></table></div><h4 id="⑩空格"><a href="#⑩空格" class="headerlink" title="⑩空格"></a>⑩空格</h4><div class="table-container"><table><thead><tr><th>输入</th><th>效果</th><th>输入</th><th>效果</th><th>输入</th><th>效果</th></tr></thead><tbody><tr><td>\!</td><td>$</td><td>!</td><td>$</td><td>默认</td><td>$</td><td></td><td>$</td><td>\quad</td><td>$</td><td>\quad</td><td>$</td></tr><tr><td>\,</td><td>$</td><td>\,</td><td>$</td><td>\;(\ )</td><td>$</td><td>\;</td><td>$</td><td>\qquad</td><td>$</td><td>\qquad</td><td>$</td></tr></tbody></table></div><h3 id="13、字体"><a href="#13、字体" class="headerlink" title="13、字体"></a>13、字体</h3><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;\字体&#123;需要转换的字符&#125;&#125;$</span><br></pre></td></tr></table></figure></blockquote><div class="table-container"><table><thead><tr><th>输入</th><th>说明</th><th>显示</th><th>输入</th><th>说明</th><th>显示</th></tr></thead><tbody><tr><td>\rm</td><td>罗马体</td><td>${\rm{Sample}}$</td><td>\cal</td><td>花体</td><td>${\cal{Sample}}$</td></tr><tr><td>\it</td><td>意大利体</td><td>${\it{Sample}}$</td><td>\Bbb</td><td>黑板粗体</td><td>${\Bbb{Sample}}$</td></tr><tr><td>\bf</td><td>粗体</td><td>${\bf{Sample}}$</td><td>\mit</td><td>数学斜体</td><td>${\mit{Sample}}$</td></tr><tr><td>\sf</td><td>等线体</td><td>${\sf{Sample}}$</td><td>\scr</td><td>手写体</td><td>${\scr{Sample}}$</td></tr><tr><td>\tt</td><td>打字机体</td><td>${\tt{Sample}}$</td><td>\frak</td><td>旧德式字体</td><td>${\frak{Sample}}$</td></tr></tbody></table></div><h3 id="14、大括号和行标"><a href="#14、大括号和行标" class="headerlink" title="14、大括号和行标"></a>14、大括号和行标</h3><blockquote><p>说明:  使用<code>\left</code>和<code>\right</code>来创建自动匹配高度的<code>()</code>、<code>[]</code>、<code>&#123;&#125;</code>、<code>.</code>。在每个公式末尾使用<code>\tag&#123;行标&#125;</code>来实现行标。</p><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;f\left(</span><br><span class="line">&gt;\left[</span><br><span class="line">&gt;\dfrac&#123;1+\&#123;x,y\&#125;&#125;&#123;\left(\dfrac&#123;x&#125;&#123;y&#125;+\dfrac&#123;y&#125;&#123;x&#125;\right)(u+1)&#125;+a</span><br><span class="line">&gt;\right]</span><br><span class="line">&gt;^&#123;\dfrac&#123;3&#125;&#123;2&#125;&#125;</span><br><span class="line">&gt;\right)</span><br><span class="line">&gt;\tag&#123;行标&#125;</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure><p>效果:</p><script type="math/tex; mode=display">f\left(\left[\dfrac{1+\{x,y\}}{\left(\dfrac{x}{y}+\dfrac{y}{x}\right)(u+1)}+a\right]^{\dfrac{3}{2}}\right)\tag{行标}</script><p>说明:如果你想将行内显示的分隔符也变大,也可以使用<code>\middle</code>命令</p><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$$</span><br><span class="line">&gt;\left\langle q\middle\|\dfrac&#123;\dfrac&#123;x&#125;&#123;y&#125;&#125;&#123;\dfrac&#123;u&#125;&#123;v&#125;&#125;\middle|p\right\rangle</span><br><span class="line">&gt;$$</span><br></pre></td></tr></table></figure><p>效果:</p><script type="math/tex; mode=display">\left\langle q\middle\|\dfrac{\dfrac{x}{y}}{\dfrac{u}{v}}\middle|p\right\rangle</script></blockquote><h3 id="15、其他命令"><a href="#15、其他命令" class="headerlink" title="15、其他命令"></a>15、其他命令</h3><h4 id="①注释文字"><a href="#①注释文字" class="headerlink" title="①注释文字"></a>①注释文字</h4><blockquote><p>代码:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\text&#123;文字&#125;$</span><br></pre></td></tr></table></figure><p>效果:</p><script type="math/tex; mode=display">f(n)=\begin{cases}n/2,&\text{if $n$ is even}\\3n+1,&\text{if $n$ is odd}\end{cases}</script></blockquote><h4 id="③文字颜色"><a href="#③文字颜色" class="headerlink" title="③文字颜色"></a>③文字颜色</h4><blockquote><ul><li>适用新旧浏览器<br>代码:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\color&#123;颜色&#125;&#123;文字&#125;$</span><br></pre></td></tr></table></figure></blockquote><div class="table-container"><table><thead><tr><th>输入</th><th>显示</th><th>输入</th><th>显示</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td>black</td><td>$\color{black}{color}$</td><td>grey</td><td>$\color{grey}{color}$</td><td>silver</td><td>$\color{silver}{color}$</td></tr><tr><td>white</td><td>$\color{white}{color}$</td><td>maroon</td><td>$\color{maroon}{color}$</td><td>red</td><td>$\color{red}{color}$</td></tr><tr><td>yellow</td><td>$\color{yellow}{color}$</td><td>lime</td><td>$\color{lime}{color}$</td><td>olive</td><td>$\color{olive}{color}$</td></tr><tr><td>green</td><td>$\color{green}{color}$</td><td>teal</td><td>$\color{teal}{color}$</td><td>auqa</td><td>$\color{auqa}{color}$</td></tr><tr><td>blue</td><td>$\color{blue}{color}$</td><td>navy</td><td>$\color{navy}{color}$</td><td>purple</td><td>$\color{purple}{color}$</td></tr><tr><td>fuchsia</td><td>$\color{fuchsia}{color}$</td><td></td><td></td><td></td></tr></tbody></table></div><blockquote><ul><li>适用新版浏览器<br>代码:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$\color&#123;#rgb&#125;&#123;文字&#125;$    (注:其中r、g、b可以输入0~9和a~f来分别表示红色、绿色和蓝色的纯度)</span><br></pre></td></tr></table></figure></blockquote><div class="table-container"><table><thead><tr><th>输入</th><th>输出</th><th>输入</th><th>输出</th><th>输入</th><th>输出</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>#000</td><td>$\color</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Topora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Topora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topora快捷键</title>
      <link href="/posts/c043e592.html"/>
      <url>/posts/c043e592.html</url>
      
        <content type="html"><![CDATA[<h3 id="一：菜单栏"><a href="#一：菜单栏" class="headerlink" title="一：菜单栏"></a>一：菜单栏</h3><p> 文件：alt+F<br> 编辑：alt+E<br> 段落：alt+P<br> 格式：alt+O<br> 视图：alt+V<br> 主题：alt+T<br> 帮助：alt+H</p><h3 id="二：文件"><a href="#二：文件" class="headerlink" title="二：文件"></a>二：文件</h3><p> 新建：Ctrl+N<br> 新建窗口：Ctrl+Shift+N<br> 打开：Ctrl+O<br> 快速打开：Ctrl+P<br> 保存：Ctrl+S<br> 另存为：Ctrl+Shift+S<br> 偏好：Ctrl+,<br> 关闭：Ctrl+W</p><h3 id="三：编辑"><a href="#三：编辑" class="headerlink" title="三：编辑"></a>三：编辑</h3><p> 撤销：Ctrl+Z<br> 重做：Ctrl+Y<br> 剪切：Ctrl+X<br> 复制：Ctrl+C<br> 粘贴：Ctrl+V<br> 复制为MarkDown：Ctrl+Shift+C<br> 粘贴为纯文本：Ctrl+Shift+V<br> 全选：Ctrl+A<br> 选中当前行/句：Ctrl+L<br> 选中当前格式文本：Ctrl+E<br> 选中当前词：Ctrl+D<br> 跳转到文首：Ctrl+Home<br> 跳转到所选内容：Ctrl+J<br> 跳转到文末：Ctrl+End<br> 查找：Ctrl+F<br> 查找下一个：F3<br> 查找上一个：Shift+F3<br> 替换：Ctrl+H</p><h3 id="四：段落"><a href="#四：段落" class="headerlink" title="四：段落"></a>四：段落</h3><p> 标题：Ctrl+1/2/3/4/5<br> 段落：Ctrl+0<br> 增大标题级别：Ctrl+=<br> 减少标题级别：Ctrl+-<br> 表格：Ctrl+T<br> 代码块：Ctrl+Shift+K<br> 公式块：Ctrl+Shift+M<br> 引用：Ctrl+Shift+Q<br> 有序列表：Ctrl+Shift+[<br> 无序列表：Ctrl+Shift+]<br> 增加缩进：Ctrl+]<br> 减少缩进：Ctrl+[</p><h3 id="五：格式"><a href="#五：格式" class="headerlink" title="五：格式"></a>五：格式</h3><p> 加粗：Ctrl+B<br> 斜体：Ctrl+I<br> 下划线：Ctrl+U<br> 代码：Ctrl+Shift+`<br> 删除线：Alt+Shift+5<br> 超链接：Ctrl+K<br> 图像：Ctrl+Shift+I<br> 清除样式：Ctrl+</p><h3 id="六：视图"><a href="#六：视图" class="headerlink" title="六：视图"></a>六：视图</h3><p> 显示隐藏侧边栏：Ctrl+Shift+L<br> 大纲视图：Ctrl+Shift+1<br> 文档列表视图：Ctrl+Shift+2<br> 文件树视图：Ctrl+Shift+3<br> 源代码模式：Ctrl+/<br> 专注模式：F8<br> 打字机模式：F9<br> 切换全屏：F11<br> 实际大小：Ctrl+Shift+0<br> 放大：Ctrl+Shift+=<br> 缩小：Ctrl+Shift+-<br> 应用内窗口切换：Ctrl+Tab<br> 打开DevTools：Shift+F12</p>]]></content>
      
      
      <categories>
          
          <category> Topora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Topora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制的转换</title>
      <link href="/posts/95a3f377.html"/>
      <url>/posts/95a3f377.html</url>
      
        <content type="html"><![CDATA[<h2 id="进制图"><a href="#进制图" class="headerlink" title="进制图"></a>进制图</h2><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">十六进制</th><th style="text-align:center">八进制</th><th style="text-align:center">二进制</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">5</td><td style="text-align:center">5</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">7</td><td style="text-align:center">7</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">10</td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">9</td><td style="text-align:center">11</td><td style="text-align:center">1001</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">A</td><td style="text-align:center">12</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">B</td><td style="text-align:center">13</td><td style="text-align:center">1011</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">C</td><td style="text-align:center">14</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">D</td><td style="text-align:center">15</td><td style="text-align:center">1101</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">E</td><td style="text-align:center">16</td><td style="text-align:center">1110</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">F</td><td style="text-align:center">17</td><td style="text-align:center">1111</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">10</td><td style="text-align:center">20</td><td style="text-align:center">10000</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">11</td><td style="text-align:center">21</td><td style="text-align:center">10001</td></tr></tbody></table></div><p>==二进制：8 4 2 1==</p><h2 id="二进制转换成十进制"><a href="#二进制转换成十进制" class="headerlink" title="二进制转换成十进制"></a>二进制转换成十进制</h2><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以 ==2== 的(位数-1)次方，然后求和。</p><p>例如：0b1011= 1 <em> 2^1-1^  + 1 </em> 2^2-1^ + 0 <em> 2^3-1^ + 1 </em> 2^4-1^ = 1+2+0+8 = 11</p><h2 id="八进制转换成十进制示例"><a href="#八进制转换成十进制示例" class="headerlink" title="八进制转换成十进制示例"></a>八进制转换成十进制示例</h2><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以 ==8== 的(位数-1)次方，然后求和。</p><p>例如：0234 = 4 <em> 8^0^ + 3 </em> 8^1^ + 2 * 8^2^  = 4 + 24 + 128 = 156</p><h2 id="十六进制转换成十进制示例"><a href="#十六进制转换成十进制示例" class="headerlink" title="十六进制转换成十进制示例"></a>十六进制转换成十进制示例</h2><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以 ==16== 的(位数-1)次方，然后求和。</p><p>例如：0x23A = 10 <em> 16^0^ + 3 </em> 16 ^1^ + 2 * 16^2^ = 10 + 48 + 512 = 570</p><h2 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h2><p>规则：将该数不断==除以 2==，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制。</p><p>例如：34 = 0B00100010</p><h2 id="十进制转换成八进制"><a href="#十进制转换成八进制" class="headerlink" title="十进制转换成八进制"></a>十进制转换成八进制</h2><p>规则：将该数不断==除以 8==，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制。</p><p>例如：131  = 0203</p><h2 id="十进制转换成十六进制"><a href="#十进制转换成十六进制" class="headerlink" title="十进制转换成十六进制"></a>十进制转换成十六进制</h2><p>规则：将该数不断==除以 16==，直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的二进制。</p><p>例如：237  = 0xED</p><h2 id="二进制转换成八进制"><a href="#二进制转换成八进制" class="headerlink" title="二进制转换成八进制"></a>二进制转换成八进制</h2><p>规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。</p><p>例如：ob11(3)010(2)101(5) =&gt; 0325</p><h2 id="二进制转换成十六进制"><a href="#二进制转换成十六进制" class="headerlink" title="二进制转换成十六进制"></a>二进制转换成十六进制</h2><p>规则：从低位开始,将二进制数每三位一组，转成对应的十六进制数即可。</p><p>例如：ob1101(D)0101(5) = 0xD5</p><h2 id="八进制转换成二进制"><a href="#八进制转换成二进制" class="headerlink" title="八进制转换成二进制"></a>八进制转换成二进制</h2><p>规则：将八进制数每 1 位，转成对应的一个==3==位的二进制数即可。</p><p>例如：02(010)3(011)7(111) = 0b10011111</p><h2 id="十六进制转换成二进制"><a href="#十六进制转换成二进制" class="headerlink" title="十六进制转换成二进制"></a>十六进制转换成二进制</h2><p>规则：将十六进制数每 1 位，转成对应的 ==4== 位的一个二进制数即可</p><p>例如：0x2(0010)3(0011)B(1011) = 0b001000111011</p>]]></content>
      
      
      <categories>
          
          <category> 进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符</title>
      <link href="/posts/778179f.html"/>
      <url>/posts/778179f.html</url>
      
        <content type="html"><![CDATA[<h2 id="六大运算符"><a href="#六大运算符" class="headerlink" title="六大运算符"></a>六大运算符</h2><p>1) 算术运算符<br>2) 赋值运算符<br>3) 关系运算符 [比较运算符]<br>4) 逻辑运算符<br>5) 位运算符<br>6) 三元运算符</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ol><li>加 <code>+</code> <strong>可以字符串相加</strong></li><li>减 <code>-</code></li><li>乘 <code>*</code></li><li>除 <code>/</code></li><li><code>++</code><br>前加加：先运算后取值 a=2；b=++a，a=3；b=3<br>后加加：先取值后运算 a=2；b=a++，a=3；b=2</li><li><code>--</code><br>前减减：先运算后取值 a=2；b=—a，a=1；b=1<br>后减减：先取值后运算 a=2；b=a—，a=1；b=2</li></ol><h2 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h2><p>结果都是<strong>boolean</strong>类型，true或false</p><p>常用在if结构等循环结构中</p><ol><li><code>==   等于</code></li><li><code>!= 不等于</code></li><li><code>&gt;  大于</code></li><li><code>&lt;    小雨</code></li><li><code>&lt;=   大于等于</code></li><li><code>&gt;=  小于等于</code></li><li><code>instanceof  检查是否是类的对象</code></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>连接多个条件（多个关系表达式，最终的结果也是一个<strong>boolean</strong>值</p><p>1) <code>a&amp;b</code> : &amp; 逻辑与：全true才true （只判断第一个）<br>2) <code>a&amp;&amp;b</code> : &amp;&amp; 短路与：全true才true （全部判断）<br>3) <code>a|b</code> : | 逻辑或：一true就true  （全部判断）<br>4) <code>a||b</code> : || 短路或：一true就true （只判断第一个）<br>5) <code>!a</code> : 取反，非运算：取相反结果<br>6) <code>a^b</code>: 逻辑异或：不同时true，相同时false</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ol><li><code>+=</code>  如a+=3;等价于 a=a+3; 其他类推</li><li><code>-=</code> </li><li><code>*=</code> </li><li><code>/=</code> </li><li><code>%=</code> </li><li>…</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int n1 = 10;</span><br><span class="line">n1 += 4;// n1 = n1 + 4;</span><br><span class="line">System.out.println(n1); // 14</span><br><span class="line">n1 /= 3;// n1 = n1 / 3;//4</span><br><span class="line">System.out.println(n1); // 4</span><br><span class="line"></span><br><span class="line">//复合赋值运算符会进行类型转换</span><br><span class="line">byte b = 3;</span><br><span class="line">b += 2; // 等价 b = (byte)(b + 2);</span><br><span class="line">b++; // b = (byte)(b+1);</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>运算规则：</p><ol><li>如果条件表达式为 true，运算后的结果是表达式 1；</li><li>如果条件表达式为 false，运算后的结果是表达式 2；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;</span><br><span class="line">int b = 99;</span><br><span class="line">// 解读</span><br><span class="line">// 1. a &gt; b 为 false</span><br><span class="line">// 2. 返回 b--, 先返回 b 的值,然后在 b-1</span><br><span class="line">// 3. 返回的结果是 99</span><br><span class="line">int result = a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(&quot;result=&quot; + result);</span><br><span class="line">System.out.println(&quot;a=&quot; + a);</span><br><span class="line">System.out.println(&quot;b=&quot; + b);</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ol><li><code>&amp;  ： 全1为1否则0</code></li><li><code>|  ： 一1为1否则0</code></li><li><code>^  ：一1一0为1否则0</code></li><li><code>~ ： 0为1,1为0</code></li><li><code>&gt;&gt;  算术右移,低位溢出,符号位不变,并用符号位补溢出的高位</code></li><li><code>&lt;&lt;  算术左移,符号位不变,低位补 0</code></li><li><code>&gt;&gt;&gt; 逻辑右移,无符号右移,运算规则是: 低位溢出，高位补 0</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a=1&gt;&gt;2; </span><br><span class="line">//1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0</span><br><span class="line">int c=1&lt;&lt;2; </span><br><span class="line">//1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</span><br><span class="line">//用进制去思考</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的数据类型</title>
      <link href="/posts/b7344535.html"/>
      <url>/posts/b7344535.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java的两种数据类型"><a href="#Java的两种数据类型" class="headerlink" title="Java的两种数据类型"></a>Java的两种数据类型</h2><ol><li>基本数据类型<ul><li>byte 1字节 </li><li>short 2字节</li><li>int 4字节</li><li>long  8字节</li><li>float  存放小数</li><li>double  存放小数</li><li>char 存放单个字符  ‘ a ‘</li><li>boolean 存放true和false</li></ul></li><li>引用类型<ul><li>类 class</li><li>接口 </li><li>数组 array</li></ul></li></ol><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><ol><li>自动类型转换：赋值，运算时，精度小的自动转型为大的</li></ol><p><strong>boolean不参与转换</strong></p><p>char——int——long——float——double</p><p>byte——short——int——long——float——double</p><ol><li>强制类型转换：<strong>将容量大的数据类型转换为容量小的数据类型</strong>使用时要加上强制转换符 ( )，但可能造成<strong>精度降低或溢出</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//int x = (int)10*3.5+6*1.5;//编译错误： double -&gt; int</span><br><span class="line">int x = (int)(10*3.5+6*1.5);// (int)44.0 -&gt; 44</span><br><span class="line">System.out.println(x);//44</span><br><span class="line"></span><br><span class="line">char c1 = 100; //ok</span><br><span class="line">int m = 100; //ok</span><br><span class="line">//char c2 = m; //错误</span><br><span class="line">char c3 = (char)m; //ok</span><br><span class="line">System.out.println(c3);//100 对应的字符, d 字符</span><br></pre></td></tr></table></figure><h2 id="基本数据类型和-String-类型的转换"><a href="#基本数据类型和-String-类型的转换" class="headerlink" title="基本数据类型和 String 类型的转换"></a>基本数据类型和 String 类型的转换</h2><p>注意：转换时需要注意String能够转成有效的数据</p><p>例如：”123”可以变成一个整数但是”hello”不行，但可用包装类进行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int n1 = 100;</span><br><span class="line">float f1 = 1.1F;</span><br><span class="line">double d1 = 4.5;</span><br><span class="line">boolean b1 = true;</span><br><span class="line">String s1 = n1 + &quot;&quot;;</span><br><span class="line">String s2 = f1 + &quot;&quot;;</span><br><span class="line">String s3 = d1 + &quot;&quot;;</span><br><span class="line">String s4 = b1 + &quot;&quot;;</span><br><span class="line">System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + s3 + &quot; &quot; + s4);</span><br><span class="line"></span><br><span class="line">String str = &quot;hello&quot;;</span><br><span class="line">//转成 int</span><br><span class="line">int n1 = Integer.parseInt(str);</span><br><span class="line">System.out.println(n1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java转义字符</title>
      <link href="/posts/a9774731.html"/>
      <url>/posts/a9774731.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java的八种转义字符"><a href="#Java的八种转义字符" class="headerlink" title="Java的八种转义字符"></a>Java的八种转义字符</h2><p>\t ：一个制表位，实现对齐的功能</p><p>\n ：换行符</p><p>\ ：一个\</p><p>\” :一个”</p><p>\’ ：一个’ </p><p>\r :一个回车</p><p>代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// \t ：一个制表位，实现对齐的功能</span><br><span class="line">System.out.println(&quot;北京\t 天津\t 上海\t 重庆&quot;);</span><br><span class="line">// \n ：换行符</span><br><span class="line">System.out.println(&quot;jack\nsmith\nmary&quot;);</span><br><span class="line">// \\ ：一个\ </span><br><span class="line">System.out.println(&quot;C:\\Windows\\System32\\cmd.exe&quot;);</span><br><span class="line">// \&quot; :一个&quot; </span><br><span class="line">System.out.println(&quot;我说:\&quot;好好学习 java\&quot;&quot;);</span><br><span class="line">// \&#x27; ：一个&#x27; </span><br><span class="line">System.out.println(&quot;我说:\&#x27;好好学习 java\&#x27;&quot;);</span><br><span class="line">// \r :一个回车</span><br><span class="line">System.out.println(&quot;xzl \r 重庆&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /* tags样式 */  #aside-content .card-tag-cloud a {    color: var(--anzhiyu-fontcolor) !important;    font-size: 1.05rem !important;    border-radius: 8px;    display: inline-block;    margin-right: 4px;  }  #aside-content .card-tag-cloud a:hover {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-white) !important;    box-shadow: var(--anzhiyu-shadow-theme);  }  @media screen and (min-width: 1300px) {    #aside-content .card-tag-cloud a:hover {      transform: scale(1.03);    }    #aside-content .card-tag-cloud a:active {      transform: scale(0.97);    }  }  #aside-content .card-tag-cloud a sup {    opacity: 0.4;    margin-left: 2px;  }  /* 归档样式 */  span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.5rem;    line-height: 0.9;    font-weight: 700;  }  .card-archive-list-count-group {    display: flex;    flex-direction: row;    align-items: baseline;  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {    width: fit-content;    margin-left: 4px;  }  span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.1rem;    line-height: 0.9;    font-weight: 700;  }  .card-archive-list-date {    font-size: 14px;    opacity: 0.6;  }  li.card-archive-list-item {    width: 100%;    flex: 0 0 48%;  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    color: var(--anzhiyu-white);    background-color: var(--anzhiyu-theme);    box-shadow: var(--anzhiyu-shadow-theme);    border-radius: 8px;    padding-left: 0.5rem;    padding-right: 0.5rem;  }  @media screen and (min-width: 1300px) {    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {      transform: scale(1.03);    }    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {      transform: scale(0.97);    }  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a {    border-radius: 8px;    margin: 4px 0;    display: flex;    flex-direction: column;    align-content: space-between;    border: var(--style-border);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {    width: auto;    flex: inherit;  }  #aside-content .card-archives ul.card-archive-list,  #aside-content .card-categories ul.card-category-list {    display: flex;    flex-direction: row;    justify-content: space-between;    flex-wrap: wrap;  }  /* 颜色 */  :root {    --anzhiyu-theme-op: #4259ef23;    --anzhiyu-gray-op: #9999992b;    --anzhiyu-theme-top: var(--anzhiyu-theme);    --anzhiyu-white: #fff;    --anzhiyu-white-op: rgba(255, 255, 255, 0.2);    --anzhiyu-black: #000;    --anzhiyu-black-op: rgba(0, 0, 0, 0.2);    --anzhiyu-none: rgba(0, 0, 0, 0);    --anzhiyu-gray: #999999;    --anzhiyu-yellow: #ffc93e;    --anzhiyu-border-radius: 8px;    --anzhiyu-main: var(--anzhiyu-theme);    --anzhiyu-main-op: var(--anzhiyu-theme-op);    --anzhiyu-shadow-theme: 0 8px 12px -3px var(--anzhiyu-theme-op);    --anzhiyu-shadow-main: 0 8px 12px -3px var(--anzhiyu-main-op);    --anzhiyu-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2);    --anzhiyu-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2);    --anzhiyu-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05);    --anzhiyu-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12);    --anzhiyu-shadow-red: 0 8px 12px -3px #ee7d7936;    --anzhiyu-shadow-green: 0 8px 12px -3px #87ee7936;    --anzhiyu-shadow-border: 0 8px 16px -4px #2c2d300c;    --anzhiyu-shadow-blackdeep: 0 2px 16px -3px rgba(0, 0, 0, 0.15);    --anzhiyu-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%);    --style-border: 1px solid var(--anzhiyu-card-border);    --anzhiyu-blue-main: #3b70fc;    --style-border-hover: 1px solid var(--anzhiyu-main);    --style-border-dashed: 1px dashed var(--anzhiyu-theme-op);    --style-border-avatar: 4px solid var(--anzhiyu-background);    --style-border-always: 1px solid var(--anzhiyu-card-border);    --anzhiyu-white-acrylic1: #fefeff !important;    --anzhiyu-white-acrylic2: #fcfdff !important;    --anzhiyu-black-acrylic2: #08080a !important;    --anzhiyu-black-acrylic1: #0b0b0e !important;    --anzhiyu-main-none: #b8b8b800 !important;  }  [data-theme="light"] {    --anzhiyu-theme: #3b70fc;    --anzhiyu-theme-op: #4259ef23;    --anzhiyu-blue: #3b70fc;    --anzhiyu-red: #d8213c;    --anzhiyu-pink: #ff7c7c;    --anzhiyu-green: #57bd6a;    --anzhiyu-fontcolor: #363636;    --anzhiyu-background: #f7f9fe;    --anzhiyu-reverse: #000;    --anzhiyu-maskbg: rgba(255, 255, 255, 0.6);    --anzhiyu-maskbgdeep: rgba(255, 255, 255, 0.85);    --anzhiyu-hovertext: var(--anzhiyu-theme);    --anzhiyu-ahoverbg: #f7f7fa;    --anzhiyu-lighttext: var(--anzhiyu-main);    --anzhiyu-secondtext: rgba(60, 60, 67, 0.6);    --anzhiyu-scrollbar: rgba(60, 60, 67, 0.4);    --anzhiyu-card-btn-bg: #edf0f7;    --anzhiyu-post-blockquote-bg: #fafcff;    --anzhiyu-post-tabs-bg: #f2f5f8;    --anzhiyu-secondbg: #edf0f7;    --anzhiyu-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);    --anzhiyu-card-bg: #fff;    --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-card-border: #c0c6d8;  }  [data-theme="dark"] {    --global-bg: #191919;    --anzhiyu-theme: #0084ff;    --anzhiyu-theme-op: #0084ff23;    --anzhiyu-blue: #0084ff;    --anzhiyu-red: #ff3842;    --anzhiyu-pink: #ff7c7c;    --anzhiyu-green: #57bd6a;    --anzhiyu-fontcolor: #f7f7fa;    --anzhiyu-background: #18171d;    --anzhiyu-reverse: #fff;    --anzhiyu-maskbg: rgba(0, 0, 0, 0.6);    --anzhiyu-maskbgdeep: rgba(0, 0, 0, 0.85);    --anzhiyu-hovertext: #0a84ff;    --anzhiyu-ahoverbg: #fff;    --anzhiyu-lighttext: #f2b94b;    --anzhiyu-secondtext: #a1a2b8;    --anzhiyu-scrollbar: rgba(200, 200, 223, 0.4);    --anzhiyu-card-btn-bg: #30343f;    --anzhiyu-post-blockquote-bg: #000;    --anzhiyu-post-tabs-bg: #121212;    --anzhiyu-secondbg: #30343f;    --anzhiyu-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4);    --anzhiyu-card-bg: #1d1b26;    --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);    --anzhiyu-card-border: #42444a;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var grt = new Date("01/01/2023 00:00:00");  now.setTime(now.getTime() + 250);  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9      ? `<img class='boardsign' src='https://img.shields.io/badge/Nidhog-%E5%AD%A6%E4%B9%A0%E4%B8%AD-Hex      ' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `<img class='boardsign' src='https://img.shields.io/badge/NIdhog-%E4%BC%91%E6%81%AF%E4%B8%AD-bule      ' title='下班了就该开开心心的玩耍'><span class='textTip'> <br> 本站运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var grt=new Date("01/01/2023 00:00:00");now.setTime(now.getTime()+250);var days=(now-grt)/1e3/60/60/24,dnum=Math.floor(days),hours=(now-grt)/1e3/60/60-24*dnum,hnum=Math.floor(hours);1==String(hnum).length&&(hnum="0"+hnum);var minutes=(now-grt)/1e3/60-1440*dnum-60*hnum,mnum=Math.floor(minutes);1==String(mnum).length&&(mnum="0"+mnum);var seconds=(now-grt)/1e3-86400*dnum-3600*hnum-60*mnum,snum=Math.round(seconds);1==String(snum).length&&(snum="0"+snum);let currentTimeHtml="";currentTimeHtml=hnum<18&&hnum>=9?`<img class='boardsign' src='https://img.shields.io/badge/Nidhog-%E5%AD%A6%E4%B9%A0%E4%B8%AD-Hex\n      ' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='https://img.shields.io/badge/NIdhog-%E4%BC%91%E6%81%AF%E4%B8%AD-bule\n      ' title='下班了就该开开心心的玩耍'><span class='textTip'> <br> 本站运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=currentTimeHtml)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
